{"version":3,"file":"index.esm.js","sources":["../../src/core/FieldRegistry.ts","../../src/core/MessageBridge.ts","../../src/core/ContentUpdater.ts","../../src/core/OverlayManager.ts","../../src/core/Inspector.ts","../../src/core/FrameworkIntegration.ts"],"sourcesContent":["/**\n * FieldRegistry - Tracks and manages DOM elements with Hygraph data attributes\n * Maintains mapping of entryId:fieldApiId â†’ HTMLElements for content updates\n */\n\nimport type {\n  InspectorConfig,\n  RegisteredElement,\n  ElementRegistry,\n  RegistryKey,\n} from '../types';\n\nexport class FieldRegistry {\n  private config: InspectorConfig;\n  private registry: ElementRegistry = {};\n  private observer: MutationObserver | null = null;\n  private isDestroyed = false;\n\n  constructor(config: InspectorConfig) {\n    this.config = config;\n    this.initializeObserver();\n    this.scanExistingElements();\n  }\n\n  /**\n   * Get all elements for a specific field\n   */\n  getElementsForField(fieldApiId: string, locale?: string): RegisteredElement[] {\n    const elements: RegisteredElement[] = [];\n\n    // Search through all registry entries for matching fieldApiId and locale\n    for (const elementList of Object.values(this.registry)) {\n      for (const element of elementList) {\n        if (element.fieldApiId === fieldApiId && element.locale === locale) {\n          elements.push(element);\n        }\n      }\n    }\n\n    return elements;\n  }\n\n  /**\n   * Get all elements for a specific entry\n   */\n  getElementsForEntry(entryId: string): RegisteredElement[] {\n    const elements: RegisteredElement[] = [];\n\n    for (const elementList of Object.values(this.registry)) {\n      for (const element of elementList) {\n        if (element.entryId === entryId) {\n          elements.push(element);\n        }\n      }\n    }\n\n    return elements;\n  }\n\n  /**\n   * Get specific element by exact match\n   */\n  getElement(entryId: string, fieldApiId?: string, locale?: string): RegisteredElement | null {\n    const key = this.createRegistryKey(entryId, fieldApiId, locale);\n    const elements = this.registry[key];\n    return elements?.[0] || null;\n  }\n\n  /**\n   * Refresh registry - scan for new elements\n   */\n  refresh(): void {\n    if (this.isDestroyed) return;\n    this.scanExistingElements();\n  }\n\n  /**\n   * Destroy registry and clean up observers\n   */\n  destroy(): void {\n    this.isDestroyed = true;\n    this.observer?.disconnect();\n    this.registry = {};\n  }\n\n  private initializeObserver(): void {\n    // Set up MutationObserver to watch for DOM changes\n    this.observer = new MutationObserver((mutations) => {\n      if (this.isDestroyed) return;\n\n      for (const mutation of mutations) {\n        // Handle added nodes\n        if (mutation.type === 'childList') {\n          for (const node of mutation.addedNodes) {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              this.scanElement(node as HTMLElement);\n            }\n          }\n        }\n\n        // Handle attribute changes\n        if (mutation.type === 'attributes' && mutation.attributeName?.startsWith('data-hygraph-')) {\n          this.updateElementRegistration(mutation.target as HTMLElement);\n        }\n      }\n    });\n\n    this.observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: [\n        'data-hygraph-entry-id',\n        'data-hygraph-field-api-id',\n        'data-hygraph-field-locale',\n      ],\n    });\n  }\n\n  private scanExistingElements(): void {\n    const elements = document.querySelectorAll('[data-hygraph-entry-id]');\n    elements.forEach((element) => this.scanElement(element as HTMLElement));\n  }\n\n  private scanElement(element: HTMLElement): void {\n    if (this.hasHygraphAttributes(element)) {\n      this.registerElement(element);\n    }\n\n    // Also scan children\n    const children = element.querySelectorAll('[data-hygraph-entry-id]');\n    children.forEach((child) => this.registerElement(child as HTMLElement));\n  }\n\n  private hasHygraphAttributes(element: HTMLElement): boolean {\n    return element.hasAttribute('data-hygraph-entry-id');\n  }\n\n  private registerElement(element: HTMLElement): void {\n    const entryId = element.getAttribute('data-hygraph-entry-id');\n    if (!entryId) return;\n\n    const fieldApiId = element.getAttribute('data-hygraph-field-api-id') || undefined;\n    const locale = element.getAttribute('data-hygraph-field-locale') || undefined;\n\n    const registeredElement: RegisteredElement = {\n      element,\n      entryId,\n      fieldApiId,\n      locale,\n      lastUpdated: Date.now(),\n    };\n\n    const key = this.createRegistryKey(entryId, fieldApiId, locale);\n\n    // Initialize array if it doesn't exist\n    if (!this.registry[key]) {\n      this.registry[key] = [];\n    }\n\n    // Check if element is already registered\n    const existingIndex = this.registry[key].findIndex((reg) => reg.element === element);\n    if (existingIndex >= 0) {\n      // Update existing registration\n      this.registry[key][existingIndex] = registeredElement;\n    } else {\n      // Add new registration\n      this.registry[key].push(registeredElement);\n    }\n\n    if (this.config.debug) {\n      console.log(`[FieldRegistry] Registered element:`, {\n        entryId,\n        fieldApiId,\n        locale,\n        element: element.tagName,\n      });\n    }\n  }\n\n  private updateElementRegistration(element: HTMLElement): void {\n    // Remove old registrations for this element\n    this.unregisterElement(element);\n\n    // Re-register with new attributes\n    if (this.hasHygraphAttributes(element)) {\n      this.registerElement(element);\n    }\n  }\n\n  private unregisterElement(element: HTMLElement): void {\n    for (const [key, elements] of Object.entries(this.registry)) {\n      const filteredElements = elements.filter((reg) => reg.element !== element);\n      if (filteredElements.length === 0) {\n        delete this.registry[key];\n      } else {\n        this.registry[key] = filteredElements;\n      }\n    }\n  }\n\n  private createRegistryKey(entryId: string, fieldApiId?: string, locale?: string): RegistryKey {\n    const parts = [entryId];\n    if (fieldApiId) parts.push(fieldApiId);\n    if (locale) parts.push(locale);\n    return parts.join(':');\n  }\n\n  /**\n   * Get registry statistics for debugging\n   */\n  getStats(): {\n    totalElements: number;\n    entriesCount: number;\n    fieldsCount: number;\n  } {\n    const entries = new Set<string>();\n    const fields = new Set<string>();\n    let totalElements = 0;\n\n    for (const elements of Object.values(this.registry)) {\n      totalElements += elements.length;\n      for (const element of elements) {\n        entries.add(element.entryId);\n        if (element.fieldApiId) {\n          fields.add(`${element.entryId}:${element.fieldApiId}`);\n        }\n      }\n    }\n\n    return {\n      totalElements,\n      entriesCount: entries.size,\n      fieldsCount: fields.size,\n    };\n  }\n\n  /**\n   * Get all registry keys (for debugging)\n   */\n  getRegistryKeys(): RegistryKey[] {\n    return Object.keys(this.registry);\n  }\n}","/**\n * MessageBridge - Handles postMessage communication with Studio\n * Provides reliable message sending with origin validation and error handling\n */\n\nimport type { SDKMessage, StudioMessage } from '../types';\n\nexport interface MessageBridgeConfig {\n  debug?: boolean;\n  allowedOrigins: string[];\n  onMessage: (message: StudioMessage) => void;\n  onReady?: () => void;\n}\n\nexport class MessageBridge {\n  private config: MessageBridgeConfig;\n  private isConnected = false;\n  private studioOrigin: string | null = null;\n  private messageQueue: SDKMessage[] = [];\n  private isDestroyed = false;\n\n  constructor(config: MessageBridgeConfig) {\n    this.config = config;\n    this.setupMessageListener();\n  }\n\n  /**\n   * Send message to Studio\n   */\n  sendMessage(message: SDKMessage): boolean {\n    if (this.isDestroyed) return false;\n\n    if (!this.isConnected || !this.studioOrigin) {\n      // Queue message for when connection is established\n      this.messageQueue.push(message);\n      return false;\n    }\n\n    try {\n      window.parent.postMessage(message, this.studioOrigin);\n\n      if (this.config.debug) {\n        console.log('[MessageBridge] Sent message:', message);\n      }\n\n      return true;\n    } catch (error) {\n      console.error('[MessageBridge] Failed to send message:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Send initial ready message to all allowed origins\n   * Used to establish initial connection when studioOrigin is unknown\n   */\n  sendReadyMessage(message: SDKMessage & { type: 'ready' }): boolean {\n    if (this.isDestroyed) return false;\n\n    let sentSuccessfully = false;\n\n    // Try sending to each allowed origin\n    for (const origin of this.config.allowedOrigins) {\n      try {\n        window.parent.postMessage(message, origin);\n\n        if (this.config.debug) {\n          console.log('[MessageBridge] Sent ready message to origin:', origin, 'message:', message);\n        }\n\n        sentSuccessfully = true;\n      } catch (error) {\n        if (this.config.debug) {\n          console.log('[MessageBridge] Failed to send ready message to origin:', origin, 'error:', error);\n        }\n      }\n    }\n\n    return sentSuccessfully;\n  }\n\n  /**\n   * Check if connected to Studio\n   */\n  isConnectedToStudio(): boolean {\n    return this.isConnected;\n  }\n\n  /**\n   * Get Studio origin\n   */\n  getStudioOrigin(): string | null {\n    return this.studioOrigin;\n  }\n\n  /**\n   * Destroy message bridge\n   */\n  destroy(): void {\n    this.isDestroyed = true;\n    this.isConnected = false;\n    this.studioOrigin = null;\n    this.messageQueue = [];\n    window.removeEventListener('message', this.handleMessage);\n  }\n\n  private setupMessageListener(): void {\n    if (this.config.debug) {\n      console.log('[MessageBridge] Setting up message listener, allowed origins:', this.config.allowedOrigins);\n    }\n    window.addEventListener('message', this.handleMessage);\n\n    // Notify that MessageBridge is ready to receive messages\n    if (this.config.onReady) {\n      // Use setTimeout to ensure the event listener is fully registered\n      setTimeout(() => {\n        this.config.onReady!();\n      }, 0);\n    }\n  }\n\n  private handleMessage = (event: MessageEvent): void => {\n    if (this.isDestroyed) return;\n\n    // Validate origin\n    if (!this.isOriginAllowed(event.origin)) {\n      if (this.config.debug) {\n        console.log('[MessageBridge] Ignored message from disallowed origin:', event.origin);\n      }\n      return;\n    }\n\n    // Validate message structure\n    const message = event.data;\n    if (!this.isValidStudioMessage(message)) {\n      if (this.config.debug) {\n        console.log('[MessageBridge] Ignored invalid message:', message);\n      }\n      return;\n    }\n\n    if (this.config.debug) {\n      console.log('[MessageBridge] Received message:', message);\n    }\n\n    // Handle connection establishment\n    if (message.type === 'init') {\n      this.handleConnection(event.origin);\n    }\n\n    // Forward message to handler\n    this.config.onMessage(message);\n  };\n\n  private isOriginAllowed(origin: string): boolean {\n    return this.config.allowedOrigins.includes(origin) ||\n           this.config.allowedOrigins.some(allowed => {\n             // Support wildcard origins like *.hygraph.com\n             if (allowed.includes('*')) {\n               const pattern = allowed.replace(/\\*/g, '.*');\n               return new RegExp(`^${pattern}$`).test(origin);\n             }\n             return false;\n           });\n  }\n\n  private isValidStudioMessage(message: any): message is StudioMessage {\n    if (!message || typeof message !== 'object') return false;\n    if (typeof message.type !== 'string') return false;\n    if (typeof message.timestamp !== 'number') return false;\n\n    // Type-specific validation\n    switch (message.type) {\n      case 'init':\n        return typeof message.studioOrigin === 'string';\n\n      case 'field-update':\n        return (\n          typeof message.entryId === 'string' &&\n          typeof message.fieldApiId === 'string' &&\n          typeof message.fieldType === 'string' &&\n          message.newValue !== undefined\n        );\n\n      case 'focus-field':\n        return typeof message.fieldApiId === 'string';\n\n      case 'bulk-update':\n        return Array.isArray(message.changes);\n\n      case 'content-saved':\n        return typeof message.entryId === 'string';\n\n      case 'disconnect':\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  private handleConnection(origin: string): void {\n    if (!this.isConnected) {\n      this.isConnected = true;\n      this.studioOrigin = origin;\n\n      if (this.config.debug) {\n        console.log('[MessageBridge] Connected to Studio:', origin);\n      }\n\n      // Send queued messages\n      this.flushMessageQueue();\n    }\n  }\n\n  private flushMessageQueue(): void {\n    const messages = [...this.messageQueue];\n    this.messageQueue = [];\n\n    for (const message of messages) {\n      this.sendMessage(message);\n    }\n\n    if (this.config.debug && messages.length > 0) {\n      console.log(`[MessageBridge] Sent ${messages.length} queued messages`);\n    }\n  }\n}","/**\n * ContentUpdater - Handles seamless content updates without page refresh\n * Supports different field types: text, rich text, assets, components\n */\n\nimport type {\n  InspectorConfig,\n  FieldUpdate,\n  UpdateResult,\n  RichTextAST,\n  AssetData,\n  ComponentData,\n  LocationData,\n} from '../types';\n\nexport class ContentUpdater {\n  private config: InspectorConfig;\n  private updateQueue: Map<string, FieldUpdate> = new Map();\n  private isDestroyed = false;\n\n  constructor(config: InspectorConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Update a single field with new content\n   */\n  async updateField(update: FieldUpdate): Promise<UpdateResult> {\n    if (this.isDestroyed) {\n      return { success: false, error: 'ContentUpdater is destroyed' };\n    }\n\n    try {\n      // Debounce updates\n      const updateKey = `${update.entryId}:${update.fieldApiId}:${update.locale || ''}`;\n      this.updateQueue.set(updateKey, update);\n\n      // Wait for debounce delay\n      await this.delay(this.config.updateDelay || 50);\n\n      // Check if this update is still the latest\n      const latestUpdate = this.updateQueue.get(updateKey);\n      if (latestUpdate !== update) {\n        return { success: true }; // Superseded by newer update\n      }\n\n      // Remove from queue\n      this.updateQueue.delete(updateKey);\n\n      // Find target elements\n      const elements = this.findElements(update.entryId, update.fieldApiId, update.locale);\n      if (elements.length === 0) {\n        return { success: false, error: 'No matching elements found' };\n      }\n\n      // Update all matching elements\n      let hasError = false;\n      let lastError = '';\n\n      for (const element of elements) {\n        try {\n          await this.updateElement(element, update);\n        } catch (error) {\n          hasError = true;\n          lastError = error instanceof Error ? error.message : String(error);\n          console.error('[ContentUpdater] Failed to update element:', error);\n        }\n      }\n\n      if (hasError) {\n        return { success: false, error: lastError };\n      }\n\n      if (this.config.debug) {\n        console.log('[ContentUpdater] Updated field:', {\n          entryId: update.entryId,\n          fieldApiId: update.fieldApiId,\n          locale: update.locale,\n          elementsCount: elements.length,\n        });\n      }\n\n      return { success: true, element: elements[0] };\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      console.error('[ContentUpdater] Update failed:', error);\n      return { success: false, error: errorMessage };\n    }\n  }\n\n  /**\n   * Destroy content updater\n   */\n  destroy(): void {\n    this.isDestroyed = true;\n    this.updateQueue.clear();\n  }\n\n  private findElements(entryId: string, fieldApiId?: string, locale?: string): HTMLElement[] {\n    const elements: HTMLElement[] = [];\n\n    // Build selector\n    let selector = `[data-hygraph-entry-id=\"${entryId}\"]`;\n    if (fieldApiId) {\n      selector += `[data-hygraph-field-api-id=\"${fieldApiId}\"]`;\n    }\n    if (locale) {\n      selector += `[data-hygraph-field-locale=\"${locale}\"]`;\n    }\n\n    const found = document.querySelectorAll<HTMLElement>(selector);\n    elements.push(...Array.from(found));\n\n    return elements;\n  }\n\n  private async updateElement(element: HTMLElement, update: FieldUpdate): Promise<void> {\n    switch (update.fieldType) {\n      case 'STRING':\n      case 'ID':\n        this.updateTextField(element, update.newValue);\n        break;\n\n      case 'RICHTEXT':\n        await this.updateRichTextField(element, update.newValue);\n        break;\n\n      case 'INT':\n      case 'FLOAT':\n        this.updateNumberField(element, update.newValue);\n        break;\n\n      case 'BOOLEAN':\n        this.updateBooleanField(element, update.newValue);\n        break;\n\n      case 'DATETIME':\n      case 'DATE':\n        this.updateDateField(element, update.newValue);\n        break;\n\n      case 'ASSET':\n        await this.updateAssetField(element, update.newValue);\n        break;\n\n      case 'LOCATION':\n        this.updateLocationField(element, update.newValue);\n        break;\n\n      case 'COLOR':\n        this.updateColorField(element, update.newValue);\n        break;\n\n      case 'COMPONENT':\n        await this.updateComponentField(element, update.newValue);\n        break;\n\n      case 'JSON':\n        this.updateJsonField(element, update.newValue);\n        break;\n\n      case 'ENUMERATION':\n        this.updateTextField(element, update.newValue);\n        break;\n\n      default:\n        throw new Error(`Unsupported field type: ${update.fieldType}`);\n    }\n  }\n\n  private updateTextField(element: HTMLElement, newValue: string): void {\n    if (!newValue && newValue !== '') return;\n\n    // Update text content\n    if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n      (element as HTMLInputElement).value = newValue;\n    } else {\n      element.textContent = newValue;\n    }\n  }\n\n  private async updateRichTextField(element: HTMLElement, richTextAST: RichTextAST): Promise<void> {\n    if (!richTextAST || !richTextAST.children) return;\n\n    try {\n      // Convert rich text AST to HTML\n      const htmlContent = this.richTextToHTML(richTextAST);\n\n      // Use morphdom if available for efficient DOM updates\n      if (this.hasMorphdom()) {\n        const tempElement = document.createElement(element.tagName);\n        tempElement.innerHTML = htmlContent;\n        (window as any).morphdom(element, tempElement);\n      } else {\n        // Fallback to innerHTML replacement\n        element.innerHTML = htmlContent;\n      }\n    } catch (error) {\n      console.error('[ContentUpdater] Rich text update failed:', error);\n      throw error;\n    }\n  }\n\n  private updateNumberField(element: HTMLElement, newValue: number): void {\n    if (newValue === null || newValue === undefined) return;\n\n    const stringValue = String(newValue);\n\n    if (element.tagName === 'INPUT') {\n      (element as HTMLInputElement).value = stringValue;\n    } else {\n      element.textContent = stringValue;\n    }\n  }\n\n  private updateBooleanField(element: HTMLElement, newValue: boolean): void {\n    if (element.tagName === 'INPUT' && (element as HTMLInputElement).type === 'checkbox') {\n      (element as HTMLInputElement).checked = newValue;\n    } else {\n      element.textContent = String(newValue);\n    }\n  }\n\n  private updateDateField(element: HTMLElement, newValue: string): void {\n    if (!newValue) return;\n\n    // Parse and format date appropriately\n    const date = new Date(newValue);\n    const formattedDate = date.toLocaleDateString();\n\n    if (element.tagName === 'INPUT' && (element as HTMLInputElement).type === 'date') {\n      (element as HTMLInputElement).value = newValue.split('T')[0];\n    } else {\n      element.textContent = formattedDate;\n    }\n  }\n\n  private async updateAssetField(element: HTMLElement, asset: AssetData | AssetData[]): Promise<void> {\n    if (!asset) return;\n\n    // Handle array of assets\n    if (Array.isArray(asset)) {\n      if (asset.length > 0) {\n        await this.updateSingleAsset(element, asset[0]);\n      }\n      return;\n    }\n\n    await this.updateSingleAsset(element, asset);\n  }\n\n  private async updateSingleAsset(element: HTMLElement, asset: AssetData): Promise<void> {\n    if (element.tagName === 'IMG') {\n      const img = element as HTMLImageElement;\n      img.src = asset.url;\n      if (asset.alt) img.alt = asset.alt;\n      if (asset.width) img.width = asset.width;\n      if (asset.height) img.height = asset.height;\n    } else if (element.tagName === 'VIDEO') {\n      const video = element as HTMLVideoElement;\n      video.src = asset.url;\n    } else if (element.tagName === 'AUDIO') {\n      const audio = element as HTMLAudioElement;\n      audio.src = asset.url;\n    } else if (element.tagName === 'A') {\n      const link = element as HTMLAnchorElement;\n      link.href = asset.url;\n      if (!link.textContent) {\n        link.textContent = asset.fileName;\n      }\n    } else {\n      // For other elements, create appropriate child element\n      element.innerHTML = `<img src=\"${asset.url}\" alt=\"${asset.alt || ''}\" />`;\n    }\n  }\n\n  private updateLocationField(element: HTMLElement, location: LocationData): void {\n    if (!location || typeof location.latitude !== 'number' || typeof location.longitude !== 'number') {\n      return;\n    }\n\n    const locationText = `${location.latitude}, ${location.longitude}`;\n    element.textContent = locationText;\n\n    // Update data attributes for map integration\n    element.setAttribute('data-latitude', String(location.latitude));\n    element.setAttribute('data-longitude', String(location.longitude));\n  }\n\n  private updateColorField(element: HTMLElement, color: string): void {\n    if (!color) return;\n\n    element.textContent = color;\n\n    // Apply color as background or text color\n    if (element.style) {\n      element.style.backgroundColor = color;\n    }\n  }\n\n  private async updateComponentField(element: HTMLElement, componentData: ComponentData): Promise<void> {\n    if (!componentData) return;\n\n    try {\n      // This is a simplified component update - in a real implementation,\n      // you might need framework-specific rendering logic\n      const componentHtml = this.renderComponent(componentData);\n\n      if (this.hasMorphdom()) {\n        const tempElement = document.createElement(element.tagName);\n        tempElement.innerHTML = componentHtml;\n        (window as any).morphdom(element, tempElement);\n      } else {\n        element.innerHTML = componentHtml;\n      }\n    } catch (error) {\n      console.error('[ContentUpdater] Component update failed:', error);\n      throw error;\n    }\n  }\n\n  private updateJsonField(element: HTMLElement, jsonData: any): void {\n    if (jsonData === null || jsonData === undefined) return;\n\n    const jsonString = JSON.stringify(jsonData, null, 2);\n    element.textContent = jsonString;\n  }\n\n  private richTextToHTML(richTextAST: RichTextAST): string {\n    if (!richTextAST.children) return '';\n\n    return richTextAST.children.map(node => this.renderRichTextNode(node)).join('');\n  }\n\n  private renderRichTextNode(node: any): string {\n    if (node.text) {\n      return this.escapeHtml(node.text);\n    }\n\n    const children = node.children ? node.children.map((child: any) => this.renderRichTextNode(child)).join('') : '';\n\n    switch (node.type) {\n      case 'paragraph':\n        return `<p>${children}</p>`;\n      case 'heading-one':\n        return `<h1>${children}</h1>`;\n      case 'heading-two':\n        return `<h2>${children}</h2>`;\n      case 'heading-three':\n        return `<h3>${children}</h3>`;\n      case 'heading-four':\n        return `<h4>${children}</h4>`;\n      case 'heading-five':\n        return `<h5>${children}</h5>`;\n      case 'heading-six':\n        return `<h6>${children}</h6>`;\n      case 'block-quote':\n        return `<blockquote>${children}</blockquote>`;\n      case 'bulleted-list':\n        return `<ul>${children}</ul>`;\n      case 'numbered-list':\n        return `<ol>${children}</ol>`;\n      case 'list-item':\n        return `<li>${children}</li>`;\n      case 'link':\n        return `<a href=\"${node.href || ''}\">${children}</a>`;\n      case 'bold':\n        return `<strong>${children}</strong>`;\n      case 'italic':\n        return `<em>${children}</em>`;\n      case 'underline':\n        return `<u>${children}</u>`;\n      case 'code':\n        return `<code>${children}</code>`;\n      default:\n        return children;\n    }\n  }\n\n  private renderComponent(componentData: ComponentData): string {\n    // Basic component rendering - this would be more sophisticated in practice\n    const typename = componentData.__typename;\n    const fields = Object.entries(componentData)\n      .filter(([key]) => key !== '__typename' && key !== 'id')\n      .map(([key, value]) => `<div data-field=\"${key}\">${this.escapeHtml(String(value))}</div>`)\n      .join('');\n\n    return `<div data-component=\"${typename}\">${fields}</div>`;\n  }\n\n  private escapeHtml(text: string): string {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  private hasMorphdom(): boolean {\n    return typeof (window as any).morphdom === 'function';\n  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}","/**\n * OverlayManager - Creates and manages visual overlays for Inspector elements\n * Provides hover effects and edit buttons for content elements\n */\n\nimport type { InspectorConfig, RegisteredElement } from '../types';\n\nexport class OverlayManager {\n  private config: InspectorConfig;\n  private overlayElement: HTMLElement | null = null;\n  private editButtonElement: HTMLElement | null = null;\n  private currentTarget: HTMLElement | null = null;\n  private isDestroyed = false;\n\n  constructor(config: InspectorConfig) {\n    this.config = config;\n    this.createOverlayElements();\n    this.setupEventListeners();\n  }\n\n  /**\n   * Show overlay for a specific element\n   */\n  showOverlay(element: HTMLElement, registeredElement: RegisteredElement): void {\n    if (this.isDestroyed || !this.config.overlayEnabled) return;\n\n    this.currentTarget = element;\n    this.updateOverlayPosition(element);\n    this.updateEditButton(registeredElement);\n    this.showOverlayElements();\n  }\n\n  /**\n   * Hide overlay\n   */\n  hideOverlay(): void {\n    if (this.isDestroyed) return;\n\n    this.currentTarget = null;\n    this.hideOverlayElements();\n  }\n\n  /**\n   * Destroy overlay manager\n   */\n  destroy(): void {\n    this.isDestroyed = true;\n    this.removeOverlayElements();\n    this.removeEventListeners();\n  }\n\n  private createOverlayElements(): void {\n    // Create overlay border element\n    this.overlayElement = document.createElement('div');\n    this.overlayElement.id = 'hygraph-inspector-overlay';\n    this.overlayElement.style.cssText = `\n      position: fixed;\n      pointer-events: none;\n      z-index: 9999;\n      border: 2px solid #3B82F6;\n      background: rgba(59, 130, 246, 0.1);\n      border-radius: 4px;\n      display: none;\n      transition: all 0.2s ease;\n      box-sizing: border-box;\n    `;\n\n    // Create edit button element\n    this.editButtonElement = document.createElement('button');\n    this.editButtonElement.id = 'hygraph-inspector-edit-button';\n    this.editButtonElement.innerHTML = `\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        <path d=\"m18.5 2.5 3 3L12 15l-4 1 1-4 9.5-9.5z\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n      </svg>\n      Edit\n    `;\n    this.editButtonElement.style.cssText = `\n      position: fixed;\n      z-index: 10000;\n      background: #3B82F6;\n      color: white;\n      border: 1px solid rgba(255, 255, 255, 0.2);\n      border-radius: 6px;\n      padding: 8px 12px;\n      font-size: 14px;\n      font-weight: 500;\n      cursor: pointer;\n      display: none;\n      align-items: center;\n      gap: 6px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15), 0 2px 4px rgba(0, 0, 0, 0.1);\n      transition: all 0.2s ease;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;\n      pointer-events: auto;\n      width: 72px;\n      height: 32px;\n      justify-content: center;\n      box-sizing: border-box;\n      backdrop-filter: blur(8px);\n      -webkit-backdrop-filter: blur(8px);\n    `;\n\n    // Add hover effects\n    this.editButtonElement.addEventListener('mouseenter', () => {\n      this.editButtonElement!.style.background = '#2563EB';\n      this.editButtonElement!.style.transform = 'scale(1.05)';\n    });\n\n    this.editButtonElement.addEventListener('mouseleave', () => {\n      this.editButtonElement!.style.background = '#3B82F6';\n      this.editButtonElement!.style.transform = 'scale(1)';\n    });\n\n    // Append to body\n    document.body.appendChild(this.overlayElement);\n    document.body.appendChild(this.editButtonElement);\n  }\n\n  private setupEventListeners(): void {\n    // Mouse move for overlay positioning\n    document.addEventListener('mousemove', this.handleMouseMove);\n    document.addEventListener('mouseleave', this.handleMouseLeave);\n\n    // Scroll handling\n    document.addEventListener('scroll', this.handleScroll, true);\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  private removeEventListeners(): void {\n    document.removeEventListener('mousemove', this.handleMouseMove);\n    document.removeEventListener('mouseleave', this.handleMouseLeave);\n    document.removeEventListener('scroll', this.handleScroll, true);\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  private handleMouseMove = (event: MouseEvent): void => {\n    if (this.isDestroyed) return;\n\n    const target = event.target as HTMLElement;\n\n    // Don't hide overlay if mouse is over our edit button\n    if (target === this.editButtonElement || this.editButtonElement?.contains(target)) {\n      return;\n    }\n\n    const hygraphElement = target.closest('[data-hygraph-entry-id]') as HTMLElement;\n\n    if (hygraphElement && hygraphElement !== this.currentTarget) {\n      // Get registered element data\n      const entryId = hygraphElement.getAttribute('data-hygraph-entry-id');\n      const fieldApiId = hygraphElement.getAttribute('data-hygraph-field-api-id');\n      const locale = hygraphElement.getAttribute('data-hygraph-field-locale');\n\n      if (entryId) {\n        const registeredElement: RegisteredElement = {\n          element: hygraphElement,\n          entryId,\n          fieldApiId: fieldApiId || undefined,\n          locale: locale || undefined,\n        };\n\n        this.showOverlay(hygraphElement, registeredElement);\n      }\n    } else if (!hygraphElement && this.currentTarget) {\n      // Add small delay to prevent flicker when moving to edit button\n      setTimeout(() => {\n        if (this.currentTarget && !this.isMouseOverEditButton(event)) {\n          this.hideOverlay();\n        }\n      }, 50);\n    }\n  };\n\n  private isMouseOverEditButton(event: MouseEvent): boolean {\n    if (!this.editButtonElement) return false;\n\n    const rect = this.editButtonElement.getBoundingClientRect();\n    return (\n      event.clientX >= rect.left &&\n      event.clientX <= rect.right &&\n      event.clientY >= rect.top &&\n      event.clientY <= rect.bottom\n    );\n  }\n\n  private handleMouseLeave = (): void => {\n    this.hideOverlay();\n  };\n\n  private handleScroll = (): void => {\n    if (this.currentTarget) {\n      this.updateOverlayPosition(this.currentTarget);\n    }\n  };\n\n  private handleResize = (): void => {\n    if (this.currentTarget) {\n      this.updateOverlayPosition(this.currentTarget);\n    }\n  };\n\n  private updateOverlayPosition(element: HTMLElement): void {\n    if (!this.overlayElement) return;\n\n    const rect = element.getBoundingClientRect();\n\n    this.overlayElement.style.left = `${rect.left}px`;\n    this.overlayElement.style.top = `${rect.top}px`;\n    this.overlayElement.style.width = `${rect.width}px`;\n    this.overlayElement.style.height = `${rect.height}px`;\n  }\n\n  private updateEditButton(registeredElement: RegisteredElement): void {\n    if (!this.editButtonElement || !this.currentTarget) return;\n\n    const rect = this.currentTarget.getBoundingClientRect();\n    const buttonWidth = 72;\n    const buttonHeight = 32;\n    const padding = 4; // Reduced padding for tighter positioning\n\n    // Always position button inside the element bounds - no gaps!\n    // Try top-right corner first\n    let buttonTop = rect.top + padding;\n    let buttonLeft = rect.right - buttonWidth - padding;\n\n    // If button doesn't fit in top-right, try other corners\n    if (buttonLeft < rect.left + padding) {\n      // Element too narrow - use left edge\n      buttonLeft = rect.left + padding;\n    }\n\n    if (buttonTop + buttonHeight + padding > rect.bottom) {\n      // Element too short - use bottom edge\n      buttonTop = Math.max(rect.top + padding, rect.bottom - buttonHeight - padding);\n    }\n\n    // Final bounds checking - ensure button stays within element\n    buttonLeft = Math.max(rect.left + padding, Math.min(buttonLeft, rect.right - buttonWidth - padding));\n    buttonTop = Math.max(rect.top + padding, Math.min(buttonTop, rect.bottom - buttonHeight - padding));\n\n    this.editButtonElement.style.left = `${buttonLeft}px`;\n    this.editButtonElement.style.top = `${buttonTop}px`;\n\n    // Update button click handler\n    this.editButtonElement.onclick = (event) => {\n      event.preventDefault();\n      event.stopPropagation();\n      this.handleEditClick(registeredElement);\n    };\n\n    // Update button tooltip\n    const fieldName = registeredElement.fieldApiId || 'entry';\n    this.editButtonElement.title = `Edit ${fieldName}`;\n  }\n\n  private handleEditClick(registeredElement: RegisteredElement): void {\n    // Emit custom event that the Inspector will handle\n    const event = new CustomEvent('hygraph-edit-click', {\n      detail: registeredElement,\n      bubbles: true,\n    });\n\n    document.dispatchEvent(event);\n\n    if (this.config.debug) {\n      console.log('[OverlayManager] Edit button clicked:', registeredElement);\n    }\n  }\n\n  private showOverlayElements(): void {\n    if (this.overlayElement) {\n      this.overlayElement.style.display = 'block';\n    }\n    if (this.editButtonElement) {\n      this.editButtonElement.style.display = 'flex';\n    }\n  }\n\n  private hideOverlayElements(): void {\n    if (this.overlayElement) {\n      this.overlayElement.style.display = 'none';\n    }\n    if (this.editButtonElement) {\n      this.editButtonElement.style.display = 'none';\n    }\n  }\n\n  private removeOverlayElements(): void {\n    if (this.overlayElement) {\n      this.overlayElement.remove();\n      this.overlayElement = null;\n    }\n    if (this.editButtonElement) {\n      this.editButtonElement.remove();\n      this.editButtonElement = null;\n    }\n  }\n}","/**\n * Core Inspector class - Main orchestrator for the Hygraph Inspector SDK\n * Handles element tracking, overlay creation, Studio communication, and content updates\n */\n\nimport { FieldRegistry } from './FieldRegistry';\nimport { MessageBridge } from './MessageBridge';\nimport { ContentUpdater } from './ContentUpdater';\nimport { OverlayManager } from './OverlayManager';\nimport type {\n  InspectorConfig,\n  SaveCallback,\n  SubscriptionConfig,\n  SDKMessage,\n  StudioMessage,\n} from '../types';\n\nexport class Inspector {\n  private config: InspectorConfig;\n  private fieldRegistry: FieldRegistry;\n  private messageBridge: MessageBridge | null = null;\n  private contentUpdater: ContentUpdater;\n  private overlayManager: OverlayManager;\n  private saveCallbacks = new Set<SaveCallback>();\n  private mode: 'iframe' | 'standalone';\n\n  constructor(config: InspectorConfig) {\n    this.config = {\n      debug: false,\n      overlayEnabled: true,\n      updateDelay: 50,\n      retryAttempts: 3,\n      autoConnect: true,\n      allowedOrigins: ['https://app.hygraph.com', 'http://localhost:3000'],\n      ...config,\n    };\n\n    // Determine operating mode\n    this.mode = this.determineMode();\n\n    // Initialize core components\n    this.fieldRegistry = new FieldRegistry(this.config);\n    this.contentUpdater = new ContentUpdater(this.config);\n    this.overlayManager = new OverlayManager(this.config);\n\n    // Initialize based on mode\n    if (this.mode === 'iframe') {\n      this.initializeIframeMode();\n    } else {\n      this.initializeStandaloneMode();\n    }\n\n    // Set up edit click handler\n    this.setupEditClickHandler();\n\n    // Make SDK available globally for debugging\n    if (this.config.debug) {\n      window.__HYGRAPH_INSPECTOR__ = this;\n    }\n\n    this.emitEvent('inspector:ready', { inspector: this });\n  }\n\n  /**\n   * Subscribe to save events - for framework refresh integration\n   */\n  subscribe(eventType: 'save', config: SubscriptionConfig): () => void {\n    if (eventType === 'save') {\n      this.saveCallbacks.add(config.callback);\n      return () => this.saveCallbacks.delete(config.callback);\n    }\n    throw new Error(`Unknown event type: ${eventType}`);\n  }\n\n  /**\n   * Get current SDK version\n   */\n  getVersion(): string {\n    return '2.0.0';\n  }\n\n  /**\n   * Get current mode\n   */\n  getMode(): 'iframe' | 'standalone' {\n    return this.mode;\n  }\n\n  /**\n   * Check if Inspector is connected to Studio\n   */\n  isConnected(): boolean {\n    return this.messageBridge?.isConnectedToStudio() ?? false;\n  }\n\n  /**\n   * Refresh element registry - scan for new elements\n   */\n  refresh(): void {\n    this.fieldRegistry.refresh();\n  }\n\n  /**\n   * Destroy Inspector and clean up resources\n   */\n  destroy(): void {\n    this.fieldRegistry.destroy();\n    this.messageBridge?.destroy();\n    this.contentUpdater.destroy();\n    this.overlayManager.destroy();\n    this.saveCallbacks.clear();\n\n    document.removeEventListener('hygraph-edit-click', this.handleEditClick as EventListener);\n\n    if (window.__HYGRAPH_INSPECTOR__ === this) {\n      delete window.__HYGRAPH_INSPECTOR__;\n    }\n  }\n\n  private determineMode(): 'iframe' | 'standalone' {\n    if (this.config.mode === 'iframe') return 'iframe';\n    if (this.config.mode === 'standalone') return 'standalone';\n\n    // Auto-detect mode\n    try {\n      return window.self === window.top ? 'standalone' : 'iframe';\n    } catch (e) {\n      // Cross-origin restrictions may throw an error\n      return 'iframe';\n    }\n  }\n\n  private initializeIframeMode(): void {\n    if (this.config.debug) {\n      console.log('[Inspector] Initializing in iframe mode');\n    }\n\n    // Initialize MessageBridge for Studio communication\n    this.messageBridge = new MessageBridge({\n      debug: this.config.debug,\n      allowedOrigins: this.getAllowedOrigins(),\n      onMessage: this.handleStudioMessage.bind(this),\n      onReady: () => {\n        if (this.config.debug) {\n          console.log('[Inspector] MessageBridge ready, sending ready message to Studio');\n        }\n        // Send ready message to Studio only after MessageBridge is ready\n        if (this.config.autoConnect) {\n          this.sendReadyMessage();\n        }\n      },\n    });\n\n    // Set up edit button handlers for postMessage\n    this.setupIframeEditHandlers();\n  }\n\n  private initializeStandaloneMode(): void {\n    if (this.config.debug) {\n      console.log('[Inspector] Initializing in standalone mode');\n    }\n\n    // Validate required config for standalone mode\n    if (!this.config.studioUrl && !this.isProductionEndpoint()) {\n      console.warn('[Inspector] Consider setting studioUrl for development endpoints');\n    }\n\n    // Set up edit button handlers for new tab opening\n    this.setupStandaloneEditHandlers();\n  }\n\n  private getAllowedOrigins(): string[] {\n    const origins = [...(this.config.allowedOrigins || [])];\n\n    // Add custom studio URL if provided\n    if (this.config.studioUrl) {\n      origins.push(new URL(this.config.studioUrl).origin);\n    }\n\n    return origins;\n  }\n\n  private isProductionEndpoint(): boolean {\n    return this.config.endpoint.includes('api.hygraph.com') ||\n           this.config.endpoint.includes('.hygraph.com');\n  }\n\n  private sendReadyMessage(): void {\n    if (!this.messageBridge) return;\n\n    const message: SDKMessage = {\n      type: 'ready',\n      sdkVersion: this.getVersion(),\n      timestamp: Date.now(),\n    };\n\n    // Use sendReadyMessage for initial connection (doesn't require known studioOrigin)\n    this.messageBridge.sendReadyMessage(message);\n  }\n\n  private handleStudioMessage(message: StudioMessage): void {\n    switch (message.type) {\n      case 'init':\n        this.handleInitMessage(message);\n        break;\n      case 'field-update':\n        this.handleFieldUpdate(message);\n        break;\n      case 'focus-field':\n        this.handleFocusField(message);\n        break;\n      case 'bulk-update':\n        this.handleBulkUpdate(message);\n        break;\n      case 'content-saved':\n        this.handleContentSaved(message);\n        break;\n      case 'disconnect':\n        this.handleDisconnect();\n        break;\n    }\n  }\n\n  private handleInitMessage(message: StudioMessage & { type: 'init' }): void {\n    if (this.config.debug) {\n      console.log('[Inspector] Connected to Studio:', message.studioOrigin);\n    }\n    this.emitEvent('inspector:connected', { studioOrigin: message.studioOrigin });\n  }\n\n  private async handleFieldUpdate(message: StudioMessage & { type: 'field-update' }): Promise<void> {\n    const result = await this.contentUpdater.updateField({\n      entryId: message.entryId,\n      fieldApiId: message.fieldApiId,\n      newValue: message.newValue,\n      locale: message.locale,\n      fieldType: message.fieldType,\n      updateId: message.updateId,\n    });\n\n    // Send result back to Studio\n    if (this.messageBridge) {\n      const responseMessage: SDKMessage = result.success\n        ? {\n            type: 'update-complete',\n            updateId: message.updateId,\n            timestamp: Date.now(),\n          }\n        : {\n            type: 'update-failed',\n            updateId: message.updateId,\n            error: result.error || 'Update failed',\n            timestamp: Date.now(),\n          };\n\n      this.messageBridge.sendMessage(responseMessage);\n    }\n\n    // Emit local event\n    if (result.success) {\n      this.emitEvent('inspector:field-updated', {\n        entryId: message.entryId,\n        fieldApiId: message.fieldApiId,\n        newValue: message.newValue,\n      });\n    } else {\n      this.emitEvent('inspector:update-failed', {\n        entryId: message.entryId,\n        fieldApiId: message.fieldApiId,\n        error: result.error || 'Update failed',\n      });\n    }\n  }\n\n  private handleFocusField(message: StudioMessage & { type: 'focus-field' }): void {\n    // Find and focus the field element\n    const elements = this.fieldRegistry.getElementsForField(\n      message.fieldApiId,\n      message.locale\n    );\n\n    if (elements.length > 0) {\n      const element = elements[0].element;\n      element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n\n      // Try to focus if it's a focusable element\n      if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n        element.focus();\n      }\n    }\n  }\n\n  private async handleBulkUpdate(message: StudioMessage & { type: 'bulk-update' }): Promise<void> {\n    const results = await Promise.all(\n      message.changes.map(change => this.contentUpdater.updateField(change))\n    );\n\n    // Check if all updates succeeded\n    const allSucceeded = results.every(result => result.success);\n    const errors = results.filter(result => !result.success).map(result => result.error);\n\n    // Send bulk result back to Studio\n    if (this.messageBridge) {\n      const responseMessage: SDKMessage = allSucceeded\n        ? {\n            type: 'update-complete',\n            timestamp: Date.now(),\n          }\n        : {\n            type: 'update-failed',\n            error: `Bulk update failed: ${errors.join(', ')}`,\n            timestamp: Date.now(),\n          };\n\n      this.messageBridge.sendMessage(responseMessage);\n    }\n  }\n\n  private async handleContentSaved(message: StudioMessage & { type: 'content-saved' }): Promise<void> {\n    if (this.config.debug) {\n      console.log('[Inspector] Content saved, triggering framework refresh');\n    }\n\n    // Emit save event\n    this.emitEvent('inspector:content-saved', {\n      entryId: message.entryId,\n      timestamp: message.timestamp\n    });\n\n    // Execute save callbacks for framework integration\n    for (const callback of this.saveCallbacks) {\n      try {\n        await callback(message.entryId);\n      } catch (error) {\n        console.error('[Inspector] Save callback failed:', error);\n      }\n    }\n  }\n\n  private handleDisconnect(): void {\n    if (this.config.debug) {\n      console.log('[Inspector] Disconnected from Studio');\n    }\n    this.emitEvent('inspector:disconnected', {});\n  }\n\n  private setupEditClickHandler(): void {\n    // Set up edit click handler for overlay manager\n    document.addEventListener('hygraph-edit-click', this.handleEditClick as EventListener);\n  }\n\n  private handleEditClick = (event: Event): void => {\n    const customEvent = event as CustomEvent;\n    const registeredElement = customEvent.detail;\n    const element = registeredElement.element;\n\n    if (this.mode === 'iframe') {\n      this.handleIframeEditClick(element);\n    } else {\n      this.handleStandaloneEditClick(element);\n    }\n  };\n\n  private setupIframeEditHandlers(): void {\n    // Edit handlers are now managed by OverlayManager\n    // This method is kept for compatibility but overlay handles the clicks\n  }\n\n  private setupStandaloneEditHandlers(): void {\n    // Edit handlers are now managed by OverlayManager\n    // This method is kept for compatibility but overlay handles the clicks\n  }\n\n  private handleIframeEditClick(element: HTMLElement): void {\n    const entryId = element.getAttribute('data-hygraph-entry-id');\n    const fieldApiId = element.getAttribute('data-hygraph-field-api-id') || undefined;\n    const locale = element.getAttribute('data-hygraph-field-locale') || undefined;\n\n    if (!entryId) return;\n\n    // Send field click message to Studio\n    if (this.messageBridge) {\n      const message: SDKMessage = {\n        type: 'field-click',\n        entryId,\n        fieldApiId,\n        locale,\n        timestamp: Date.now(),\n      };\n\n      const success = this.messageBridge.sendMessage(message);\n\n      // Fallback to standalone mode if not connected\n      if (!success && this.config.standalone?.fallbackToNewTab !== false) {\n        if (this.config.debug) {\n          console.log('[Inspector] Studio not connected, falling back to new tab');\n        }\n        this.handleStandaloneEditClick(element);\n      }\n    }\n\n    // Emit event\n    this.emitEvent('inspector:field-click', {\n      entryId,\n      fieldApiId,\n      locale,\n      mode: this.mode\n    });\n  }\n\n  private handleStandaloneEditClick(element: HTMLElement): void {\n    const entryId = element.getAttribute('data-hygraph-entry-id');\n    const fieldApiId = element.getAttribute('data-hygraph-field-api-id') || undefined;\n    const locale = element.getAttribute('data-hygraph-field-locale') || undefined;\n\n    if (!entryId) return;\n\n    if (!this.config.endpoint) {\n      console.error('[Inspector] Cannot open Studio - no endpoint configured');\n      return;\n    }\n\n    // Construct Studio resource route URL\n    const studioUrl = this.buildStudioUrl(entryId, fieldApiId, locale);\n\n    // Open in new tab\n    window.open(studioUrl, '_blank', 'noopener,noreferrer');\n\n    if (this.config.debug) {\n      console.log('[Inspector] Opened Studio in new tab:', studioUrl);\n    }\n\n    // Emit event\n    this.emitEvent('inspector:field-click', {\n      entryId,\n      fieldApiId,\n      locale,\n      mode: this.mode\n    });\n  }\n\n  private buildStudioUrl(entryId: string, fieldApiId?: string, locale?: string): string {\n    const baseUrl = this.config.studioUrl || 'https://app.hygraph.com';\n    const params = new URLSearchParams({\n      endpoint: this.config.endpoint,\n      entryId,\n    });\n\n    if (fieldApiId) params.set('fieldApiId', fieldApiId);\n    if (locale) params.set('locale', locale);\n\n    return `${baseUrl}/entry?${params.toString()}`;\n  }\n\n  private emitEvent<K extends keyof import('../types').InspectorEvents>(\n    type: K,\n    detail: import('../types').InspectorEvents[K]['detail']\n  ): void {\n    const event = new CustomEvent(type, { detail });\n    document.dispatchEvent(event);\n  }\n}","/**\n * FrameworkIntegration - Utilities for integrating with different frontend frameworks\n * Provides framework-specific refresh mechanisms for content saves\n */\n\nexport type FrameworkType = 'nextjs' | 'remix' | 'gatsby' | 'nuxt' | 'sveltekit' | 'vanilla';\n\nexport interface FrameworkDetection {\n  type: FrameworkType;\n  version?: string;\n  router?: any;\n  revalidator?: any;\n}\n\nexport class FrameworkIntegration {\n  private detectedFramework: FrameworkDetection | null = null;\n\n  constructor() {\n    this.detectFramework();\n  }\n\n  /**\n   * Get the detected framework\n   */\n  getFramework(): FrameworkDetection | null {\n    return this.detectedFramework;\n  }\n\n  /**\n   * Get a framework-native refresh function\n   */\n  getRefreshFunction(): (() => void | Promise<void>) | null {\n    if (!this.detectedFramework) return null;\n\n    switch (this.detectedFramework.type) {\n      case 'nextjs':\n        return this.getNextjsRefresh();\n      case 'remix':\n        return this.getRemixRefresh();\n      case 'gatsby':\n        return this.getGatsbyRefresh();\n      case 'nuxt':\n        return this.getNuxtRefresh();\n      case 'sveltekit':\n        return this.getSveltekitRefresh();\n      default:\n        return this.getVanillaRefresh();\n    }\n  }\n\n  /**\n   * Execute framework-appropriate refresh\n   */\n  async refresh(): Promise<void> {\n    const refreshFn = this.getRefreshFunction();\n    if (refreshFn) {\n      await refreshFn();\n    } else {\n      // Fallback to page reload\n      window.location.reload();\n    }\n  }\n\n  private detectFramework(): void {\n    // Next.js detection\n    if (this.hasNextjs()) {\n      this.detectedFramework = {\n        type: 'nextjs',\n        router: this.getNextjsRouter(),\n      };\n      return;\n    }\n\n    // Remix detection\n    if (this.hasRemix()) {\n      this.detectedFramework = {\n        type: 'remix',\n        revalidator: this.getRemixRevalidator(),\n      };\n      return;\n    }\n\n    // Gatsby detection\n    if (this.hasGatsby()) {\n      this.detectedFramework = {\n        type: 'gatsby',\n      };\n      return;\n    }\n\n    // Nuxt detection\n    if (this.hasNuxt()) {\n      this.detectedFramework = {\n        type: 'nuxt',\n      };\n      return;\n    }\n\n    // SvelteKit detection\n    if (this.hasSveltekit()) {\n      this.detectedFramework = {\n        type: 'sveltekit',\n      };\n      return;\n    }\n\n    // Fallback to vanilla\n    this.detectedFramework = {\n      type: 'vanilla',\n    };\n  }\n\n  private hasNextjs(): boolean {\n    return (\n      typeof window !== 'undefined' &&\n      ((window as any).__NEXT_DATA__ ||\n       (window as any).next ||\n       document.querySelector('script[src*=\"/_next/\"]') !== null)\n    );\n  }\n\n  private hasRemix(): boolean {\n    return (\n      typeof window !== 'undefined' &&\n      ((window as any).__remixContext ||\n       (window as any).__remixRouterContext ||\n       document.querySelector('script[src*=\"/build/\"]') !== null)\n    );\n  }\n\n  private hasGatsby(): boolean {\n    return (\n      typeof window !== 'undefined' &&\n      ((window as any).___gatsby ||\n       (window as any).__GATSBY ||\n       document.querySelector('[data-gatsby-browser-entry]') !== null)\n    );\n  }\n\n  private hasNuxt(): boolean {\n    return (\n      typeof window !== 'undefined' &&\n      ((window as any).__NUXT__ ||\n       (window as any).$nuxt ||\n       document.querySelector('#__nuxt') !== null)\n    );\n  }\n\n  private hasSveltekit(): boolean {\n    return (\n      typeof window !== 'undefined' &&\n      ((window as any).__SVELTEKIT__ ||\n       document.querySelector('[data-sveltekit-preload-data]') !== null)\n    );\n  }\n\n  private getNextjsRouter(): any {\n    if (typeof window === 'undefined') return null;\n\n    // Try to get Next.js router from various sources\n    return (\n      (window as any).next?.router ||\n      (window as any).__NEXT_DATA__?.router ||\n      null\n    );\n  }\n\n  private getRemixRevalidator(): any {\n    if (typeof window === 'undefined') return null;\n\n    // Try to get Remix revalidator\n    return (\n      (window as any).__remixRevalidator ||\n      (window as any).__remixRouterContext?.revalidator ||\n      null\n    );\n  }\n\n  private getNextjsRefresh(): (() => void) | null {\n    const router = this.getNextjsRouter();\n    if (router && typeof router.replace === 'function') {\n      return () => {\n        // Use router.replace to refresh the current page\n        router.replace(router.asPath || window.location.pathname);\n      };\n    }\n\n    // Fallback: try to use Next.js global refresh\n    if (typeof (window as any).location?.reload === 'function') {\n      return () => window.location.reload();\n    }\n\n    return null;\n  }\n\n  private getRemixRefresh(): (() => void) | null {\n    const revalidator = this.getRemixRevalidator();\n    if (revalidator && typeof revalidator.revalidate === 'function') {\n      return () => revalidator.revalidate();\n    }\n\n    // Try to find Remix's global revalidate function\n    if (typeof (window as any).__remixRevalidate === 'function') {\n      return () => (window as any).__remixRevalidate();\n    }\n\n    return null;\n  }\n\n  private getGatsbyRefresh(): (() => void) | null {\n    // Gatsby typically requires full page reload for content updates\n    return () => window.location.reload();\n  }\n\n  private getNuxtRefresh(): (() => void) | null {\n    const nuxtApp = (window as any).$nuxt;\n    if (nuxtApp && typeof nuxtApp.refresh === 'function') {\n      return () => nuxtApp.refresh();\n    }\n\n    // Try Nuxt 3 approach\n    if (typeof (window as any).refreshCookie === 'function') {\n      return () => (window as any).refreshCookie();\n    }\n\n    return () => window.location.reload();\n  }\n\n  private getSveltekitRefresh(): (() => void) | null {\n    // SvelteKit: try to use invalidateAll\n    if (typeof (window as any).invalidateAll === 'function') {\n      return () => (window as any).invalidateAll();\n    }\n\n    // Fallback to page reload\n    return () => window.location.reload();\n  }\n\n  private getVanillaRefresh(): () => void {\n    return () => window.location.reload();\n  }\n\n  /**\n   * Get recommended setup instructions for the detected framework\n   */\n  getSetupInstructions(): string {\n    if (!this.detectedFramework) return '';\n\n    switch (this.detectedFramework.type) {\n      case 'nextjs':\n        return `\n// Next.js setup:\nimport { HygraphInspector } from '@hygraph/inspector-sdk/react';\nimport { useRouter } from 'next/router';\n\nfunction App() {\n  const router = useRouter();\n\n  return (\n    <HygraphInspector\n      endpoint=\"your-endpoint\"\n      onSave={() => router.replace(router.asPath)}\n    >\n      {/* Your content */}\n    </HygraphInspector>\n  );\n}`;\n\n      case 'remix':\n        return `\n// Remix setup:\nimport { HygraphInspector } from '@hygraph/inspector-sdk/react';\nimport { useRevalidator } from '@remix-run/react';\n\nexport default function App() {\n  const revalidator = useRevalidator();\n\n  return (\n    <HygraphInspector\n      endpoint=\"your-endpoint\"\n      onSave={() => revalidator.revalidate()}\n    >\n      {/* Your content */}\n    </HygraphInspector>\n  );\n}`;\n\n      case 'vanilla':\n        return `\n// Vanilla JS setup:\nimport { Inspector } from '@hygraph/inspector-sdk';\n\nconst inspector = new Inspector({\n  endpoint: 'your-endpoint'\n});\n\ninspector.subscribe('save', {\n  callback: () => window.location.reload()\n});`;\n\n      default:\n        return `\n// ${this.detectedFramework.type} setup:\nimport { Inspector } from '@hygraph/inspector-sdk';\n\nconst inspector = new Inspector({\n  endpoint: 'your-endpoint'\n});\n\ninspector.subscribe('save', {\n  callback: () => {\n    // Add framework-specific refresh logic here\n    window.location.reload();\n  }\n});`;\n    }\n  }\n}"],"names":[],"mappings":"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"}
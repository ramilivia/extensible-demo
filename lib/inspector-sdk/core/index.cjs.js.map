{"version":3,"file":"index.cjs.js","sources":["../../src/core/FieldRegistry.ts","../../src/core/MessageBridge.ts","../../src/core/ContentUpdater.ts","../../src/core/OverlayManager.ts","../../src/core/FrameworkIntegration.ts","../../src/core/Inspector.ts"],"sourcesContent":["/**\n * FieldRegistry - Tracks and manages DOM elements with Hygraph data attributes\n * Maintains mapping of entryId:fieldApiId â†’ HTMLElements for content updates\n */\n\nimport type {\n  InspectorConfig,\n  RegisteredElement,\n  ElementRegistry,\n  RegistryKey,\n} from '../types';\n\nexport class FieldRegistry {\n  private config: InspectorConfig;\n  private registry: ElementRegistry = {};\n  private observer: MutationObserver | null = null;\n  private isDestroyed = false;\n\n  constructor(config: InspectorConfig) {\n    this.config = config;\n    this.initializeObserver();\n    this.scanExistingElements();\n  }\n\n  /**\n   * Get all elements for a specific field\n   */\n  getElementsForField(fieldApiId: string, locale?: string): RegisteredElement[] {\n    const elements: RegisteredElement[] = [];\n\n    // Search through all registry entries for matching fieldApiId and locale\n    for (const elementList of Object.values(this.registry)) {\n      for (const element of elementList) {\n        if (element.fieldApiId === fieldApiId && element.locale === locale) {\n          elements.push(element);\n        }\n      }\n    }\n\n    return elements;\n  }\n\n  /**\n   * Get all elements for a specific entry\n   */\n  getElementsForEntry(entryId: string): RegisteredElement[] {\n    const elements: RegisteredElement[] = [];\n\n    for (const elementList of Object.values(this.registry)) {\n      for (const element of elementList) {\n        if (element.entryId === entryId) {\n          elements.push(element);\n        }\n      }\n    }\n\n    return elements;\n  }\n\n  /**\n   * Get specific element by exact match\n   */\n  getElement(entryId: string, fieldApiId?: string, locale?: string): RegisteredElement | null {\n    const key = this.createRegistryKey(entryId, fieldApiId, locale);\n    const elements = this.registry[key];\n    return elements?.[0] || null;\n  }\n\n  /**\n   * Refresh registry - scan for new elements\n   */\n  refresh(): void {\n    if (this.isDestroyed) return;\n    this.scanExistingElements();\n  }\n\n  /**\n   * Destroy registry and clean up observers\n   */\n  destroy(): void {\n    this.isDestroyed = true;\n    this.observer?.disconnect();\n    this.registry = {};\n  }\n\n  private initializeObserver(): void {\n    // Set up MutationObserver to watch for DOM changes\n    this.observer = new MutationObserver((mutations) => {\n      if (this.isDestroyed) return;\n\n      for (const mutation of mutations) {\n        // Handle added nodes\n        if (mutation.type === 'childList') {\n          for (const node of mutation.addedNodes) {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              this.scanElement(node as HTMLElement);\n            }\n          }\n        }\n\n        // Handle attribute changes\n        if (mutation.type === 'attributes' && mutation.attributeName?.startsWith('data-hygraph-')) {\n          this.updateElementRegistration(mutation.target as HTMLElement);\n        }\n      }\n    });\n\n    this.observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: [\n        'data-hygraph-entry-id',\n        'data-hygraph-field-api-id',\n        'data-hygraph-field-locale',\n      ],\n    });\n  }\n\n  private scanExistingElements(): void {\n    const elements = document.querySelectorAll('[data-hygraph-entry-id]');\n    elements.forEach((element) => this.scanElement(element as HTMLElement));\n  }\n\n  private scanElement(element: HTMLElement): void {\n    if (this.hasHygraphAttributes(element)) {\n      this.registerElement(element);\n    }\n\n    // Also scan children\n    const children = element.querySelectorAll('[data-hygraph-entry-id]');\n    children.forEach((child) => this.registerElement(child as HTMLElement));\n  }\n\n  private hasHygraphAttributes(element: HTMLElement): boolean {\n    return element.hasAttribute('data-hygraph-entry-id');\n  }\n\n  private registerElement(element: HTMLElement): void {\n    const entryId = element.getAttribute('data-hygraph-entry-id');\n    if (!entryId) return;\n\n    const fieldApiId = element.getAttribute('data-hygraph-field-api-id') || undefined;\n    const locale = element.getAttribute('data-hygraph-field-locale') || undefined;\n\n    const registeredElement: RegisteredElement = {\n      element,\n      entryId,\n      fieldApiId,\n      locale,\n      lastUpdated: Date.now(),\n    };\n\n    const key = this.createRegistryKey(entryId, fieldApiId, locale);\n\n    // Initialize array if it doesn't exist\n    if (!this.registry[key]) {\n      this.registry[key] = [];\n    }\n\n    // Check if element is already registered\n    const existingIndex = this.registry[key].findIndex((reg) => reg.element === element);\n    if (existingIndex >= 0) {\n      // Update existing registration\n      this.registry[key][existingIndex] = registeredElement;\n    } else {\n      // Add new registration\n      this.registry[key].push(registeredElement);\n    }\n\n    if (this.config.debug) {\n      console.log(`[FieldRegistry] Registered element:`, {\n        entryId,\n        fieldApiId,\n        locale,\n        element: element.tagName,\n      });\n    }\n  }\n\n  private updateElementRegistration(element: HTMLElement): void {\n    // Remove old registrations for this element\n    this.unregisterElement(element);\n\n    // Re-register with new attributes\n    if (this.hasHygraphAttributes(element)) {\n      this.registerElement(element);\n    }\n  }\n\n  private unregisterElement(element: HTMLElement): void {\n    for (const [key, elements] of Object.entries(this.registry)) {\n      const filteredElements = elements.filter((reg) => reg.element !== element);\n      if (filteredElements.length === 0) {\n        delete this.registry[key];\n      } else {\n        this.registry[key] = filteredElements;\n      }\n    }\n  }\n\n  private createRegistryKey(entryId: string, fieldApiId?: string, locale?: string): RegistryKey {\n    const parts = [entryId];\n    if (fieldApiId) parts.push(fieldApiId);\n    if (locale) parts.push(locale);\n    return parts.join(':');\n  }\n\n  /**\n   * Get registry statistics for debugging\n   */\n  getStats(): {\n    totalElements: number;\n    entriesCount: number;\n    fieldsCount: number;\n  } {\n    const entries = new Set<string>();\n    const fields = new Set<string>();\n    let totalElements = 0;\n\n    for (const elements of Object.values(this.registry)) {\n      totalElements += elements.length;\n      for (const element of elements) {\n        entries.add(element.entryId);\n        if (element.fieldApiId) {\n          fields.add(`${element.entryId}:${element.fieldApiId}`);\n        }\n      }\n    }\n\n    return {\n      totalElements,\n      entriesCount: entries.size,\n      fieldsCount: fields.size,\n    };\n  }\n\n  /**\n   * Get all registry keys (for debugging)\n   */\n  getRegistryKeys(): RegistryKey[] {\n    return Object.keys(this.registry);\n  }\n}","/**\n * MessageBridge - Handles postMessage communication with Studio\n * Provides reliable message sending with origin validation and error handling\n */\n\nimport type { SDKMessage, StudioMessage } from '../types';\n\nexport interface MessageBridgeConfig {\n  debug?: boolean;\n  allowedOrigins: string[];\n  onMessage: (message: StudioMessage) => void;\n  onReady?: () => void;\n}\n\nexport class MessageBridge {\n  private config: MessageBridgeConfig;\n  private isConnected = false;\n  private studioOrigin: string | null = null;\n  private messageQueue: SDKMessage[] = [];\n  private isDestroyed = false;\n\n  constructor(config: MessageBridgeConfig) {\n    this.config = config;\n    this.setupMessageListener();\n  }\n\n  /**\n   * Send message to Studio\n   */\n  sendMessage(message: SDKMessage): boolean {\n    if (this.isDestroyed) return false;\n\n    if (!this.isConnected || !this.studioOrigin) {\n      // Queue message for when connection is established\n      this.messageQueue.push(message);\n      return false;\n    }\n\n    try {\n      window.parent.postMessage(message, this.studioOrigin);\n\n      if (this.config.debug) {\n        console.log('[MessageBridge] Sent message:', message);\n      }\n\n      return true;\n    } catch (error) {\n      console.error('[MessageBridge] Failed to send message:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Send initial ready message to all allowed origins\n   * Used to establish initial connection when studioOrigin is unknown\n   */\n  sendReadyMessage(message: SDKMessage & { type: 'ready' }): boolean {\n    if (this.isDestroyed) return false;\n\n    let sentSuccessfully = false;\n\n    // Try sending to each allowed origin\n    for (const origin of this.config.allowedOrigins) {\n      try {\n        window.parent.postMessage(message, origin);\n\n        if (this.config.debug) {\n          console.log('[MessageBridge] Sent ready message to origin:', origin, 'message:', message);\n        }\n\n        sentSuccessfully = true;\n      } catch (error) {\n        if (this.config.debug) {\n          console.log('[MessageBridge] Failed to send ready message to origin:', origin, 'error:', error);\n        }\n      }\n    }\n\n    return sentSuccessfully;\n  }\n\n  /**\n   * Check if connected to Studio\n   */\n  isConnectedToStudio(): boolean {\n    return this.isConnected;\n  }\n\n  /**\n   * Get Studio origin\n   */\n  getStudioOrigin(): string | null {\n    return this.studioOrigin;\n  }\n\n  /**\n   * Destroy message bridge\n   */\n  destroy(): void {\n    this.isDestroyed = true;\n    this.isConnected = false;\n    this.studioOrigin = null;\n    this.messageQueue = [];\n    window.removeEventListener('message', this.handleMessage);\n  }\n\n  private setupMessageListener(): void {\n    if (this.config.debug) {\n      console.log('[MessageBridge] Setting up message listener, allowed origins:', this.config.allowedOrigins);\n    }\n    window.addEventListener('message', this.handleMessage);\n\n    // Notify that MessageBridge is ready to receive messages\n    if (this.config.onReady) {\n      // Use setTimeout to ensure the event listener is fully registered\n      setTimeout(() => {\n        this.config.onReady!();\n      }, 0);\n    }\n  }\n\n  private handleMessage = (event: MessageEvent): void => {\n    if (this.isDestroyed) return;\n\n    // Validate origin\n    if (!this.isOriginAllowed(event.origin)) {\n      if (this.config.debug) {\n        console.log('[MessageBridge] Ignored message from disallowed origin:', event.origin);\n      }\n      return;\n    }\n\n    // Validate message structure\n    const message = event.data;\n    if (!this.isValidStudioMessage(message)) {\n      if (this.config.debug) {\n        console.log('[MessageBridge] Ignored invalid message:', message);\n      }\n      return;\n    }\n\n    if (this.config.debug) {\n      console.log('[MessageBridge] Received message:', message);\n    }\n\n    // Handle connection establishment\n    if (message.type === 'init') {\n      this.handleConnection(event.origin);\n    }\n\n    // Forward message to handler\n    this.config.onMessage(message);\n  };\n\n  private isOriginAllowed(origin: string): boolean {\n    return this.config.allowedOrigins.includes(origin) ||\n           this.config.allowedOrigins.some(allowed => {\n             // Support wildcard origins like *.hygraph.com\n             if (allowed.includes('*')) {\n               const pattern = allowed.replace(/\\*/g, '.*');\n               return new RegExp(`^${pattern}$`).test(origin);\n             }\n             return false;\n           });\n  }\n\n  private isValidStudioMessage(message: any): message is StudioMessage {\n    if (!message || typeof message !== 'object') return false;\n    if (typeof message.type !== 'string') return false;\n    if (typeof message.timestamp !== 'number') return false;\n\n    // Type-specific validation\n    switch (message.type) {\n      case 'init':\n        return typeof message.studioOrigin === 'string';\n\n      case 'field-update':\n        return (\n          typeof message.entryId === 'string' &&\n          typeof message.fieldApiId === 'string' &&\n          typeof message.fieldType === 'string' &&\n          message.newValue !== undefined\n        );\n\n      case 'focus-field':\n        return typeof message.fieldApiId === 'string';\n\n      case 'bulk-update':\n        return Array.isArray(message.changes);\n\n      case 'content-saved':\n        return typeof message.entryId === 'string';\n\n      case 'disconnect':\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  private handleConnection(origin: string): void {\n    if (!this.isConnected) {\n      this.isConnected = true;\n      this.studioOrigin = origin;\n\n      if (this.config.debug) {\n        console.log('[MessageBridge] Connected to Studio:', origin);\n      }\n\n      // Send queued messages\n      this.flushMessageQueue();\n    }\n  }\n\n  private flushMessageQueue(): void {\n    const messages = [...this.messageQueue];\n    this.messageQueue = [];\n\n    for (const message of messages) {\n      this.sendMessage(message);\n    }\n\n    if (this.config.debug && messages.length > 0) {\n      console.log(`[MessageBridge] Sent ${messages.length} queued messages`);\n    }\n  }\n}","/**\n * ContentUpdater - Handles seamless content updates without page refresh\n * Supports different field types: text, rich text, assets, components\n */\n\nimport type {\n  InspectorConfig,\n  FieldUpdate,\n  UpdateResult,\n  RichTextAST,\n  AssetData,\n  ComponentData,\n  LocationData,\n} from '../types';\n\nexport class ContentUpdater {\n  private config: InspectorConfig;\n  private updateQueue: Map<string, FieldUpdate> = new Map();\n  private isDestroyed = false;\n\n  constructor(config: InspectorConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Update a single field with new content\n   */\n  async updateField(update: FieldUpdate): Promise<UpdateResult> {\n    if (this.isDestroyed) {\n      return { success: false, error: 'ContentUpdater is destroyed' };\n    }\n\n    try {\n      // Debounce updates\n      const updateKey = `${update.entryId}:${update.fieldApiId}:${update.locale || ''}`;\n      this.updateQueue.set(updateKey, update);\n\n      // Wait for debounce delay\n      await this.delay(this.config.updateDelay || 50);\n\n      // Check if this update is still the latest\n      const latestUpdate = this.updateQueue.get(updateKey);\n      if (latestUpdate !== update) {\n        return { success: true }; // Superseded by newer update\n      }\n\n      // Remove from queue\n      this.updateQueue.delete(updateKey);\n\n      // Find target elements\n      const elements = this.findElements(update.entryId, update.fieldApiId, update.locale);\n      if (elements.length === 0) {\n        return { success: false, error: 'No matching elements found' };\n      }\n\n      // Update all matching elements\n      let hasError = false;\n      let lastError = '';\n\n      for (const element of elements) {\n        try {\n          await this.updateElement(element, update);\n        } catch (error) {\n          hasError = true;\n          lastError = error instanceof Error ? error.message : String(error);\n          console.error('[ContentUpdater] Failed to update element:', error);\n        }\n      }\n\n      if (hasError) {\n        return { success: false, error: lastError };\n      }\n\n      if (this.config.debug) {\n        console.log('[ContentUpdater] Updated field:', {\n          entryId: update.entryId,\n          fieldApiId: update.fieldApiId,\n          locale: update.locale,\n          elementsCount: elements.length,\n        });\n      }\n\n      return { success: true, element: elements[0] };\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      console.error('[ContentUpdater] Update failed:', error);\n      return { success: false, error: errorMessage };\n    }\n  }\n\n  /**\n   * Destroy content updater\n   */\n  destroy(): void {\n    this.isDestroyed = true;\n    this.updateQueue.clear();\n  }\n\n  private findElements(entryId: string, fieldApiId?: string, locale?: string): HTMLElement[] {\n    const elements: HTMLElement[] = [];\n\n    // Build selector\n    let selector = `[data-hygraph-entry-id=\"${entryId}\"]`;\n    if (fieldApiId) {\n      selector += `[data-hygraph-field-api-id=\"${fieldApiId}\"]`;\n    }\n    if (locale) {\n      selector += `[data-hygraph-field-locale=\"${locale}\"]`;\n    }\n\n    const found = document.querySelectorAll<HTMLElement>(selector);\n    elements.push(...Array.from(found));\n\n    return elements;\n  }\n\n  private async updateElement(element: HTMLElement, update: FieldUpdate): Promise<void> {\n    switch (update.fieldType) {\n      case 'STRING':\n      case 'ID':\n        this.updateTextField(element, update.newValue);\n        break;\n\n      case 'RICHTEXT':\n        await this.updateRichTextField(element, update.newValue);\n        break;\n\n      case 'INT':\n      case 'FLOAT':\n        this.updateNumberField(element, update.newValue);\n        break;\n\n      case 'BOOLEAN':\n        this.updateBooleanField(element, update.newValue);\n        break;\n\n      case 'DATETIME':\n      case 'DATE':\n        this.updateDateField(element, update.newValue);\n        break;\n\n      case 'ASSET':\n        await this.updateAssetField(element, update.newValue);\n        break;\n\n      case 'LOCATION':\n        this.updateLocationField(element, update.newValue);\n        break;\n\n      case 'COLOR':\n        this.updateColorField(element, update.newValue);\n        break;\n\n      case 'COMPONENT':\n        await this.updateComponentField(element, update.newValue);\n        break;\n\n      case 'JSON':\n        this.updateJsonField(element, update.newValue);\n        break;\n\n      case 'ENUMERATION':\n        this.updateTextField(element, update.newValue);\n        break;\n\n      default:\n        throw new Error(`Unsupported field type: ${update.fieldType}`);\n    }\n  }\n\n  private updateTextField(element: HTMLElement, newValue: string): void {\n    if (!newValue && newValue !== '') return;\n\n    // Update text content\n    if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n      (element as HTMLInputElement).value = newValue;\n    } else {\n      element.textContent = newValue;\n    }\n  }\n\n  private async updateRichTextField(element: HTMLElement, richTextAST: RichTextAST): Promise<void> {\n    if (!richTextAST || !richTextAST.children) return;\n\n    try {\n      // Convert rich text AST to HTML\n      const htmlContent = this.richTextToHTML(richTextAST);\n\n      // Use morphdom if available for efficient DOM updates\n      if (this.hasMorphdom()) {\n        const tempElement = document.createElement(element.tagName);\n        tempElement.innerHTML = htmlContent;\n        (window as any).morphdom(element, tempElement);\n      } else {\n        // Fallback to innerHTML replacement\n        element.innerHTML = htmlContent;\n      }\n    } catch (error) {\n      console.error('[ContentUpdater] Rich text update failed:', error);\n      throw error;\n    }\n  }\n\n  private updateNumberField(element: HTMLElement, newValue: number): void {\n    if (newValue === null || newValue === undefined) return;\n\n    const stringValue = String(newValue);\n\n    if (element.tagName === 'INPUT') {\n      (element as HTMLInputElement).value = stringValue;\n    } else {\n      element.textContent = stringValue;\n    }\n  }\n\n  private updateBooleanField(element: HTMLElement, newValue: boolean): void {\n    if (element.tagName === 'INPUT' && (element as HTMLInputElement).type === 'checkbox') {\n      (element as HTMLInputElement).checked = newValue;\n    } else {\n      element.textContent = String(newValue);\n    }\n  }\n\n  private updateDateField(element: HTMLElement, newValue: string): void {\n    if (!newValue) return;\n\n    // Parse and format date appropriately\n    const date = new Date(newValue);\n    const formattedDate = date.toLocaleDateString();\n\n    if (element.tagName === 'INPUT' && (element as HTMLInputElement).type === 'date') {\n      (element as HTMLInputElement).value = newValue.split('T')[0];\n    } else {\n      element.textContent = formattedDate;\n    }\n  }\n\n  private async updateAssetField(element: HTMLElement, asset: AssetData | AssetData[]): Promise<void> {\n    if (!asset) return;\n\n    // Handle array of assets\n    if (Array.isArray(asset)) {\n      if (asset.length > 0) {\n        await this.updateSingleAsset(element, asset[0]);\n      }\n      return;\n    }\n\n    await this.updateSingleAsset(element, asset);\n  }\n\n  private async updateSingleAsset(element: HTMLElement, asset: AssetData): Promise<void> {\n    if (element.tagName === 'IMG') {\n      const img = element as HTMLImageElement;\n      img.src = asset.url;\n      if (asset.alt) img.alt = asset.alt;\n      if (asset.width) img.width = asset.width;\n      if (asset.height) img.height = asset.height;\n    } else if (element.tagName === 'VIDEO') {\n      const video = element as HTMLVideoElement;\n      video.src = asset.url;\n    } else if (element.tagName === 'AUDIO') {\n      const audio = element as HTMLAudioElement;\n      audio.src = asset.url;\n    } else if (element.tagName === 'A') {\n      const link = element as HTMLAnchorElement;\n      link.href = asset.url;\n      if (!link.textContent) {\n        link.textContent = asset.fileName;\n      }\n    } else {\n      // For other elements, create appropriate child element\n      element.innerHTML = `<img src=\"${asset.url}\" alt=\"${asset.alt || ''}\" />`;\n    }\n  }\n\n  private updateLocationField(element: HTMLElement, location: LocationData): void {\n    if (!location || typeof location.latitude !== 'number' || typeof location.longitude !== 'number') {\n      return;\n    }\n\n    const locationText = `${location.latitude}, ${location.longitude}`;\n    element.textContent = locationText;\n\n    // Update data attributes for map integration\n    element.setAttribute('data-latitude', String(location.latitude));\n    element.setAttribute('data-longitude', String(location.longitude));\n  }\n\n  private updateColorField(element: HTMLElement, color: string): void {\n    if (!color) return;\n\n    element.textContent = color;\n\n    // Apply color as background or text color\n    if (element.style) {\n      element.style.backgroundColor = color;\n    }\n  }\n\n  private async updateComponentField(element: HTMLElement, componentData: ComponentData): Promise<void> {\n    if (!componentData) return;\n\n    try {\n      // This is a simplified component update - in a real implementation,\n      // you might need framework-specific rendering logic\n      const componentHtml = this.renderComponent(componentData);\n\n      if (this.hasMorphdom()) {\n        const tempElement = document.createElement(element.tagName);\n        tempElement.innerHTML = componentHtml;\n        (window as any).morphdom(element, tempElement);\n      } else {\n        element.innerHTML = componentHtml;\n      }\n    } catch (error) {\n      console.error('[ContentUpdater] Component update failed:', error);\n      throw error;\n    }\n  }\n\n  private updateJsonField(element: HTMLElement, jsonData: any): void {\n    if (jsonData === null || jsonData === undefined) return;\n\n    const jsonString = JSON.stringify(jsonData, null, 2);\n    element.textContent = jsonString;\n  }\n\n  private richTextToHTML(richTextAST: RichTextAST): string {\n    if (!richTextAST.children) return '';\n\n    return richTextAST.children.map(node => this.renderRichTextNode(node)).join('');\n  }\n\n  private renderRichTextNode(node: any): string {\n    if (node.text) {\n      return this.escapeHtml(node.text);\n    }\n\n    const children = node.children ? node.children.map((child: any) => this.renderRichTextNode(child)).join('') : '';\n\n    switch (node.type) {\n      case 'paragraph':\n        return `<p>${children}</p>`;\n      case 'heading-one':\n        return `<h1>${children}</h1>`;\n      case 'heading-two':\n        return `<h2>${children}</h2>`;\n      case 'heading-three':\n        return `<h3>${children}</h3>`;\n      case 'heading-four':\n        return `<h4>${children}</h4>`;\n      case 'heading-five':\n        return `<h5>${children}</h5>`;\n      case 'heading-six':\n        return `<h6>${children}</h6>`;\n      case 'block-quote':\n        return `<blockquote>${children}</blockquote>`;\n      case 'bulleted-list':\n        return `<ul>${children}</ul>`;\n      case 'numbered-list':\n        return `<ol>${children}</ol>`;\n      case 'list-item':\n        return `<li>${children}</li>`;\n      case 'link':\n        return `<a href=\"${node.href || ''}\">${children}</a>`;\n      case 'bold':\n        return `<strong>${children}</strong>`;\n      case 'italic':\n        return `<em>${children}</em>`;\n      case 'underline':\n        return `<u>${children}</u>`;\n      case 'code':\n        return `<code>${children}</code>`;\n      default:\n        return children;\n    }\n  }\n\n  private renderComponent(componentData: ComponentData): string {\n    // Basic component rendering - this would be more sophisticated in practice\n    const typename = componentData.__typename;\n    const fields = Object.entries(componentData)\n      .filter(([key]) => key !== '__typename' && key !== 'id')\n      .map(([key, value]) => `<div data-field=\"${key}\">${this.escapeHtml(String(value))}</div>`)\n      .join('');\n\n    return `<div data-component=\"${typename}\">${fields}</div>`;\n  }\n\n  private escapeHtml(text: string): string {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  private hasMorphdom(): boolean {\n    return typeof (window as any).morphdom === 'function';\n  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}","/**\n * OverlayManager - Creates and manages visual overlays for Inspector elements\n * Provides hover effects and edit buttons for content elements\n */\n\nimport type { InspectorConfig, RegisteredElement } from '../types';\n\nexport class OverlayManager {\n  private config: InspectorConfig;\n  private overlayElement: HTMLElement | null = null;\n  private editButtonElement: HTMLElement | null = null;\n  private currentTarget: HTMLElement | null = null;\n  private isDestroyed = false;\n\n  constructor(config: InspectorConfig) {\n    this.config = config;\n    this.createOverlayElements();\n    this.setupEventListeners();\n  }\n\n  /**\n   * Show overlay for a specific element\n   */\n  showOverlay(element: HTMLElement, registeredElement: RegisteredElement): void {\n    if (this.isDestroyed || !this.config.overlayEnabled) return;\n\n    this.currentTarget = element;\n    this.updateOverlayPosition(element);\n    this.updateEditButton(registeredElement);\n    this.showOverlayElements();\n  }\n\n  /**\n   * Hide overlay\n   */\n  hideOverlay(): void {\n    if (this.isDestroyed) return;\n\n    this.currentTarget = null;\n    this.hideOverlayElements();\n  }\n\n  /**\n   * Destroy overlay manager\n   */\n  destroy(): void {\n    this.isDestroyed = true;\n    this.removeOverlayElements();\n    this.removeEventListeners();\n  }\n\n  private createOverlayElements(): void {\n    // Create overlay border element\n    this.overlayElement = document.createElement('div');\n    this.overlayElement.id = 'hygraph-inspector-overlay';\n    this.overlayElement.style.cssText = `\n      position: fixed;\n      pointer-events: none;\n      z-index: 9999;\n      border: 2px solid #3B82F6;\n      background: rgba(59, 130, 246, 0.1);\n      border-radius: 4px;\n      display: none;\n      transition: all 0.2s ease;\n      box-sizing: border-box;\n    `;\n\n    // Create edit button element\n    this.editButtonElement = document.createElement('button');\n    this.editButtonElement.id = 'hygraph-inspector-edit-button';\n    this.editButtonElement.innerHTML = `\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        <path d=\"m18.5 2.5 3 3L12 15l-4 1 1-4 9.5-9.5z\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n      </svg>\n      Edit\n    `;\n    this.editButtonElement.style.cssText = `\n      position: fixed;\n      z-index: 10000;\n      background: #3B82F6;\n      color: white;\n      border: 1px solid rgba(255, 255, 255, 0.2);\n      border-radius: 6px;\n      padding: 8px 12px;\n      font-size: 14px;\n      font-weight: 500;\n      cursor: pointer;\n      display: none;\n      align-items: center;\n      gap: 6px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15), 0 2px 4px rgba(0, 0, 0, 0.1);\n      transition: all 0.2s ease;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;\n      pointer-events: auto;\n      width: 72px;\n      height: 32px;\n      justify-content: center;\n      box-sizing: border-box;\n      backdrop-filter: blur(8px);\n      -webkit-backdrop-filter: blur(8px);\n    `;\n\n    // Add hover effects\n    this.editButtonElement.addEventListener('mouseenter', () => {\n      this.editButtonElement!.style.background = '#2563EB';\n      this.editButtonElement!.style.transform = 'scale(1.05)';\n    });\n\n    this.editButtonElement.addEventListener('mouseleave', () => {\n      this.editButtonElement!.style.background = '#3B82F6';\n      this.editButtonElement!.style.transform = 'scale(1)';\n    });\n\n    // Append to body\n    document.body.appendChild(this.overlayElement);\n    document.body.appendChild(this.editButtonElement);\n  }\n\n  private setupEventListeners(): void {\n    // Mouse move for overlay positioning\n    document.addEventListener('mousemove', this.handleMouseMove);\n    document.addEventListener('mouseleave', this.handleMouseLeave);\n\n    // Scroll handling\n    document.addEventListener('scroll', this.handleScroll, true);\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  private removeEventListeners(): void {\n    document.removeEventListener('mousemove', this.handleMouseMove);\n    document.removeEventListener('mouseleave', this.handleMouseLeave);\n    document.removeEventListener('scroll', this.handleScroll, true);\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  private handleMouseMove = (event: MouseEvent): void => {\n    if (this.isDestroyed) return;\n\n    const target = event.target as HTMLElement;\n\n    // Don't hide overlay if mouse is over our edit button\n    if (target === this.editButtonElement || this.editButtonElement?.contains(target)) {\n      return;\n    }\n\n    const hygraphElement = target.closest('[data-hygraph-entry-id]') as HTMLElement;\n\n    if (hygraphElement && hygraphElement !== this.currentTarget) {\n      // Get registered element data\n      const entryId = hygraphElement.getAttribute('data-hygraph-entry-id');\n      const fieldApiId = hygraphElement.getAttribute('data-hygraph-field-api-id');\n      const locale = hygraphElement.getAttribute('data-hygraph-field-locale');\n\n      if (entryId) {\n        const registeredElement: RegisteredElement = {\n          element: hygraphElement,\n          entryId,\n          fieldApiId: fieldApiId || undefined,\n          locale: locale || undefined,\n        };\n\n        this.showOverlay(hygraphElement, registeredElement);\n      }\n    } else if (!hygraphElement && this.currentTarget) {\n      // Add small delay to prevent flicker when moving to edit button\n      setTimeout(() => {\n        if (this.currentTarget && !this.isMouseOverEditButton(event)) {\n          this.hideOverlay();\n        }\n      }, 50);\n    }\n  };\n\n  private isMouseOverEditButton(event: MouseEvent): boolean {\n    if (!this.editButtonElement) return false;\n\n    const rect = this.editButtonElement.getBoundingClientRect();\n    return (\n      event.clientX >= rect.left &&\n      event.clientX <= rect.right &&\n      event.clientY >= rect.top &&\n      event.clientY <= rect.bottom\n    );\n  }\n\n  private handleMouseLeave = (): void => {\n    this.hideOverlay();\n  };\n\n  private handleScroll = (): void => {\n    if (this.currentTarget) {\n      this.updateOverlayPosition(this.currentTarget);\n    }\n  };\n\n  private handleResize = (): void => {\n    if (this.currentTarget) {\n      this.updateOverlayPosition(this.currentTarget);\n    }\n  };\n\n  private updateOverlayPosition(element: HTMLElement): void {\n    if (!this.overlayElement) return;\n\n    const rect = element.getBoundingClientRect();\n\n    this.overlayElement.style.left = `${rect.left}px`;\n    this.overlayElement.style.top = `${rect.top}px`;\n    this.overlayElement.style.width = `${rect.width}px`;\n    this.overlayElement.style.height = `${rect.height}px`;\n  }\n\n  private updateEditButton(registeredElement: RegisteredElement): void {\n    if (!this.editButtonElement || !this.currentTarget) return;\n\n    const rect = this.currentTarget.getBoundingClientRect();\n    const buttonWidth = 72;\n    const buttonHeight = 32;\n    const padding = 4; // Reduced padding for tighter positioning\n\n    // Always position button inside the element bounds - no gaps!\n    // Try top-right corner first\n    let buttonTop = rect.top + padding;\n    let buttonLeft = rect.right - buttonWidth - padding;\n\n    // If button doesn't fit in top-right, try other corners\n    if (buttonLeft < rect.left + padding) {\n      // Element too narrow - use left edge\n      buttonLeft = rect.left + padding;\n    }\n\n    if (buttonTop + buttonHeight + padding > rect.bottom) {\n      // Element too short - use bottom edge\n      buttonTop = Math.max(rect.top + padding, rect.bottom - buttonHeight - padding);\n    }\n\n    // Final bounds checking - ensure button stays within element\n    buttonLeft = Math.max(rect.left + padding, Math.min(buttonLeft, rect.right - buttonWidth - padding));\n    buttonTop = Math.max(rect.top + padding, Math.min(buttonTop, rect.bottom - buttonHeight - padding));\n\n    this.editButtonElement.style.left = `${buttonLeft}px`;\n    this.editButtonElement.style.top = `${buttonTop}px`;\n\n    // Update button click handler\n    this.editButtonElement.onclick = (event) => {\n      event.preventDefault();\n      event.stopPropagation();\n      this.handleEditClick(registeredElement);\n    };\n\n    // Update button tooltip\n    const fieldName = registeredElement.fieldApiId || 'entry';\n    this.editButtonElement.title = `Edit ${fieldName}`;\n  }\n\n  private handleEditClick(registeredElement: RegisteredElement): void {\n    // Emit custom event that the Inspector will handle\n    const event = new CustomEvent('hygraph-edit-click', {\n      detail: registeredElement,\n      bubbles: true,\n    });\n\n    document.dispatchEvent(event);\n\n    if (this.config.debug) {\n      console.log('[OverlayManager] Edit button clicked:', registeredElement);\n    }\n  }\n\n  private showOverlayElements(): void {\n    if (this.overlayElement) {\n      this.overlayElement.style.display = 'block';\n    }\n    if (this.editButtonElement) {\n      this.editButtonElement.style.display = 'flex';\n    }\n  }\n\n  private hideOverlayElements(): void {\n    if (this.overlayElement) {\n      this.overlayElement.style.display = 'none';\n    }\n    if (this.editButtonElement) {\n      this.editButtonElement.style.display = 'none';\n    }\n  }\n\n  private removeOverlayElements(): void {\n    if (this.overlayElement) {\n      this.overlayElement.remove();\n      this.overlayElement = null;\n    }\n    if (this.editButtonElement) {\n      this.editButtonElement.remove();\n      this.editButtonElement = null;\n    }\n  }\n}","/**\n * FrameworkIntegration - Utilities for integrating with different frontend frameworks\n * Provides framework-specific refresh mechanisms for content saves\n */\n\nexport type FrameworkType = 'nextjs' | 'remix' | 'gatsby' | 'nuxt' | 'sveltekit' | 'vanilla';\n\nexport interface FrameworkDetection {\n  type: FrameworkType;\n  version?: string;\n  router?: any;\n  revalidator?: any;\n}\n\nexport class FrameworkIntegration {\n  private detectedFramework: FrameworkDetection | null = null;\n\n  constructor() {\n    this.detectFramework();\n  }\n\n  /**\n   * Get the detected framework\n   */\n  getFramework(): FrameworkDetection | null {\n    return this.detectedFramework;\n  }\n\n  /**\n   * Get a framework-native refresh function\n   */\n  getRefreshFunction(): (() => void | Promise<void>) | null {\n    if (!this.detectedFramework) return null;\n\n    switch (this.detectedFramework.type) {\n      case 'nextjs':\n        return this.getNextjsRefresh();\n      case 'remix':\n        return this.getRemixRefresh();\n      case 'gatsby':\n        return this.getGatsbyRefresh();\n      case 'nuxt':\n        return this.getNuxtRefresh();\n      case 'sveltekit':\n        return this.getSveltekitRefresh();\n      default:\n        return this.getVanillaRefresh();\n    }\n  }\n\n  /**\n   * Execute framework-appropriate refresh\n   */\n  async refresh(): Promise<void> {\n    const refreshFn = this.getRefreshFunction();\n    if (refreshFn) {\n      await refreshFn();\n    } else {\n      // Fallback to page reload\n      window.location.reload();\n    }\n  }\n\n  private detectFramework(): void {\n    // Next.js detection\n    if (this.hasNextjs()) {\n      this.detectedFramework = {\n        type: 'nextjs',\n        router: this.getNextjsRouter(),\n      };\n      return;\n    }\n\n    // Remix detection\n    if (this.hasRemix()) {\n      this.detectedFramework = {\n        type: 'remix',\n        revalidator: this.getRemixRevalidator(),\n      };\n      return;\n    }\n\n    // Gatsby detection\n    if (this.hasGatsby()) {\n      this.detectedFramework = {\n        type: 'gatsby',\n      };\n      return;\n    }\n\n    // Nuxt detection\n    if (this.hasNuxt()) {\n      this.detectedFramework = {\n        type: 'nuxt',\n      };\n      return;\n    }\n\n    // SvelteKit detection\n    if (this.hasSveltekit()) {\n      this.detectedFramework = {\n        type: 'sveltekit',\n      };\n      return;\n    }\n\n    // Fallback to vanilla\n    this.detectedFramework = {\n      type: 'vanilla',\n    };\n  }\n\n  private hasNextjs(): boolean {\n    return (\n      typeof window !== 'undefined' &&\n      ((window as any).__NEXT_DATA__ ||\n       (window as any).next ||\n       document.querySelector('script[src*=\"/_next/\"]') !== null)\n    );\n  }\n\n  private hasRemix(): boolean {\n    return (\n      typeof window !== 'undefined' &&\n      ((window as any).__remixContext ||\n       (window as any).__remixRouterContext ||\n       document.querySelector('script[src*=\"/build/\"]') !== null)\n    );\n  }\n\n  private hasGatsby(): boolean {\n    return (\n      typeof window !== 'undefined' &&\n      ((window as any).___gatsby ||\n       (window as any).__GATSBY ||\n       document.querySelector('[data-gatsby-browser-entry]') !== null)\n    );\n  }\n\n  private hasNuxt(): boolean {\n    return (\n      typeof window !== 'undefined' &&\n      ((window as any).__NUXT__ ||\n       (window as any).$nuxt ||\n       document.querySelector('#__nuxt') !== null)\n    );\n  }\n\n  private hasSveltekit(): boolean {\n    return (\n      typeof window !== 'undefined' &&\n      ((window as any).__SVELTEKIT__ ||\n       document.querySelector('[data-sveltekit-preload-data]') !== null)\n    );\n  }\n\n  private getNextjsRouter(): any {\n    if (typeof window === 'undefined') return null;\n\n    // Try to get Next.js router from various sources\n    return (\n      (window as any).next?.router ||\n      (window as any).__NEXT_DATA__?.router ||\n      null\n    );\n  }\n\n  private getRemixRevalidator(): any {\n    if (typeof window === 'undefined') return null;\n\n    // Try to get Remix revalidator\n    return (\n      (window as any).__remixRevalidator ||\n      (window as any).__remixRouterContext?.revalidator ||\n      null\n    );\n  }\n\n  private getNextjsRefresh(): (() => void) | null {\n    const router = this.getNextjsRouter();\n    if (router && typeof router.replace === 'function') {\n      return () => {\n        // Use router.replace to refresh the current page\n        router.replace(router.asPath || window.location.pathname);\n      };\n    }\n\n    // Fallback: try to use Next.js global refresh\n    if (typeof (window as any).location?.reload === 'function') {\n      return () => window.location.reload();\n    }\n\n    return null;\n  }\n\n  private getRemixRefresh(): (() => void) | null {\n    const revalidator = this.getRemixRevalidator();\n    if (revalidator && typeof revalidator.revalidate === 'function') {\n      return () => revalidator.revalidate();\n    }\n\n    // Try to find Remix's global revalidate function\n    if (typeof (window as any).__remixRevalidate === 'function') {\n      return () => (window as any).__remixRevalidate();\n    }\n\n    return null;\n  }\n\n  private getGatsbyRefresh(): (() => void) | null {\n    // Gatsby typically requires full page reload for content updates\n    return () => window.location.reload();\n  }\n\n  private getNuxtRefresh(): (() => void) | null {\n    const nuxtApp = (window as any).$nuxt;\n    if (nuxtApp && typeof nuxtApp.refresh === 'function') {\n      return () => nuxtApp.refresh();\n    }\n\n    // Try Nuxt 3 approach\n    if (typeof (window as any).refreshCookie === 'function') {\n      return () => (window as any).refreshCookie();\n    }\n\n    return () => window.location.reload();\n  }\n\n  private getSveltekitRefresh(): (() => void) | null {\n    // SvelteKit: try to use invalidateAll\n    if (typeof (window as any).invalidateAll === 'function') {\n      return () => (window as any).invalidateAll();\n    }\n\n    // Fallback to page reload\n    return () => window.location.reload();\n  }\n\n  private getVanillaRefresh(): () => void {\n    return () => window.location.reload();\n  }\n\n  /**\n   * Get recommended setup instructions for the detected framework\n   */\n  getSetupInstructions(): string {\n    if (!this.detectedFramework) return '';\n\n    switch (this.detectedFramework.type) {\n      case 'nextjs':\n        return `\n// Next.js setup:\nimport { HygraphInspector } from '@hygraph/inspector-sdk/react';\nimport { useRouter } from 'next/router';\n\nfunction App() {\n  const router = useRouter();\n\n  return (\n    <HygraphInspector\n      endpoint=\"your-endpoint\"\n      onSave={() => router.replace(router.asPath)}\n    >\n      {/* Your content */}\n    </HygraphInspector>\n  );\n}`;\n\n      case 'remix':\n        return `\n// Remix setup:\nimport { HygraphInspector } from '@hygraph/inspector-sdk/react';\nimport { useRevalidator } from '@remix-run/react';\n\nexport default function App() {\n  const revalidator = useRevalidator();\n\n  return (\n    <HygraphInspector\n      endpoint=\"your-endpoint\"\n      onSave={() => revalidator.revalidate()}\n    >\n      {/* Your content */}\n    </HygraphInspector>\n  );\n}`;\n\n      case 'vanilla':\n        return `\n// Vanilla JS setup:\nimport { Inspector } from '@hygraph/inspector-sdk';\n\nconst inspector = new Inspector({\n  endpoint: 'your-endpoint'\n});\n\ninspector.subscribe('save', {\n  callback: () => window.location.reload()\n});`;\n\n      default:\n        return `\n// ${this.detectedFramework.type} setup:\nimport { Inspector } from '@hygraph/inspector-sdk';\n\nconst inspector = new Inspector({\n  endpoint: 'your-endpoint'\n});\n\ninspector.subscribe('save', {\n  callback: () => {\n    // Add framework-specific refresh logic here\n    window.location.reload();\n  }\n});`;\n    }\n  }\n}","/**\n * Core Inspector class - Main orchestrator for the Hygraph Inspector SDK\n * Handles element tracking, overlay creation, Studio communication, and content updates\n */\n\nimport { FieldRegistry } from './FieldRegistry';\nimport { MessageBridge } from './MessageBridge';\nimport { ContentUpdater } from './ContentUpdater';\nimport { OverlayManager } from './OverlayManager';\nimport type {\n  InspectorConfig,\n  SaveCallback,\n  SubscriptionConfig,\n  SDKMessage,\n  StudioMessage,\n} from '../types';\n\nexport class Inspector {\n  private config: InspectorConfig;\n  private fieldRegistry: FieldRegistry;\n  private messageBridge: MessageBridge | null = null;\n  private contentUpdater: ContentUpdater;\n  private overlayManager: OverlayManager;\n  private saveCallbacks = new Set<SaveCallback>();\n  private mode: 'iframe' | 'standalone';\n\n  constructor(config: InspectorConfig) {\n    this.config = {\n      debug: false,\n      overlayEnabled: true,\n      updateDelay: 50,\n      retryAttempts: 3,\n      autoConnect: true,\n      allowedOrigins: ['https://app.hygraph.com', 'http://localhost:3000'],\n      ...config,\n    };\n\n    // Determine operating mode\n    this.mode = this.determineMode();\n\n    // Initialize core components\n    this.fieldRegistry = new FieldRegistry(this.config);\n    this.contentUpdater = new ContentUpdater(this.config);\n    this.overlayManager = new OverlayManager(this.config);\n\n    // Initialize based on mode\n    if (this.mode === 'iframe') {\n      this.initializeIframeMode();\n    } else {\n      this.initializeStandaloneMode();\n    }\n\n    // Set up edit click handler\n    this.setupEditClickHandler();\n\n    // Make SDK available globally for debugging\n    if (this.config.debug) {\n      window.__HYGRAPH_INSPECTOR__ = this;\n    }\n\n    this.emitEvent('inspector:ready', { inspector: this });\n  }\n\n  /**\n   * Subscribe to save events - for framework refresh integration\n   */\n  subscribe(eventType: 'save', config: SubscriptionConfig): () => void {\n    if (eventType === 'save') {\n      this.saveCallbacks.add(config.callback);\n      return () => this.saveCallbacks.delete(config.callback);\n    }\n    throw new Error(`Unknown event type: ${eventType}`);\n  }\n\n  /**\n   * Get current SDK version\n   */\n  getVersion(): string {\n    return '2.0.0';\n  }\n\n  /**\n   * Get current mode\n   */\n  getMode(): 'iframe' | 'standalone' {\n    return this.mode;\n  }\n\n  /**\n   * Check if Inspector is connected to Studio\n   */\n  isConnected(): boolean {\n    return this.messageBridge?.isConnectedToStudio() ?? false;\n  }\n\n  /**\n   * Refresh element registry - scan for new elements\n   */\n  refresh(): void {\n    this.fieldRegistry.refresh();\n  }\n\n  /**\n   * Destroy Inspector and clean up resources\n   */\n  destroy(): void {\n    this.fieldRegistry.destroy();\n    this.messageBridge?.destroy();\n    this.contentUpdater.destroy();\n    this.overlayManager.destroy();\n    this.saveCallbacks.clear();\n\n    document.removeEventListener('hygraph-edit-click', this.handleEditClick as EventListener);\n\n    if (window.__HYGRAPH_INSPECTOR__ === this) {\n      delete window.__HYGRAPH_INSPECTOR__;\n    }\n  }\n\n  private determineMode(): 'iframe' | 'standalone' {\n    if (this.config.mode === 'iframe') return 'iframe';\n    if (this.config.mode === 'standalone') return 'standalone';\n\n    // Auto-detect mode\n    try {\n      return window.self === window.top ? 'standalone' : 'iframe';\n    } catch (e) {\n      // Cross-origin restrictions may throw an error\n      return 'iframe';\n    }\n  }\n\n  private initializeIframeMode(): void {\n    if (this.config.debug) {\n      console.log('[Inspector] Initializing in iframe mode');\n    }\n\n    // Initialize MessageBridge for Studio communication\n    this.messageBridge = new MessageBridge({\n      debug: this.config.debug,\n      allowedOrigins: this.getAllowedOrigins(),\n      onMessage: this.handleStudioMessage.bind(this),\n      onReady: () => {\n        if (this.config.debug) {\n          console.log('[Inspector] MessageBridge ready, sending ready message to Studio');\n        }\n        // Send ready message to Studio only after MessageBridge is ready\n        if (this.config.autoConnect) {\n          this.sendReadyMessage();\n        }\n      },\n    });\n\n    // Set up edit button handlers for postMessage\n    this.setupIframeEditHandlers();\n  }\n\n  private initializeStandaloneMode(): void {\n    if (this.config.debug) {\n      console.log('[Inspector] Initializing in standalone mode');\n    }\n\n    // Validate required config for standalone mode\n    if (!this.config.studioUrl && !this.isProductionEndpoint()) {\n      console.warn('[Inspector] Consider setting studioUrl for development endpoints');\n    }\n\n    // Set up edit button handlers for new tab opening\n    this.setupStandaloneEditHandlers();\n  }\n\n  private getAllowedOrigins(): string[] {\n    const origins = [...(this.config.allowedOrigins || [])];\n\n    // Add custom studio URL if provided\n    if (this.config.studioUrl) {\n      origins.push(new URL(this.config.studioUrl).origin);\n    }\n\n    return origins;\n  }\n\n  private isProductionEndpoint(): boolean {\n    return this.config.endpoint.includes('api.hygraph.com') ||\n           this.config.endpoint.includes('.hygraph.com');\n  }\n\n  private sendReadyMessage(): void {\n    if (!this.messageBridge) return;\n\n    const message: SDKMessage = {\n      type: 'ready',\n      sdkVersion: this.getVersion(),\n      timestamp: Date.now(),\n    };\n\n    // Use sendReadyMessage for initial connection (doesn't require known studioOrigin)\n    this.messageBridge.sendReadyMessage(message);\n  }\n\n  private handleStudioMessage(message: StudioMessage): void {\n    switch (message.type) {\n      case 'init':\n        this.handleInitMessage(message);\n        break;\n      case 'field-update':\n        this.handleFieldUpdate(message);\n        break;\n      case 'focus-field':\n        this.handleFocusField(message);\n        break;\n      case 'bulk-update':\n        this.handleBulkUpdate(message);\n        break;\n      case 'content-saved':\n        this.handleContentSaved(message);\n        break;\n      case 'disconnect':\n        this.handleDisconnect();\n        break;\n    }\n  }\n\n  private handleInitMessage(message: StudioMessage & { type: 'init' }): void {\n    if (this.config.debug) {\n      console.log('[Inspector] Connected to Studio:', message.studioOrigin);\n    }\n    this.emitEvent('inspector:connected', { studioOrigin: message.studioOrigin });\n  }\n\n  private async handleFieldUpdate(message: StudioMessage & { type: 'field-update' }): Promise<void> {\n    const result = await this.contentUpdater.updateField({\n      entryId: message.entryId,\n      fieldApiId: message.fieldApiId,\n      newValue: message.newValue,\n      locale: message.locale,\n      fieldType: message.fieldType,\n      updateId: message.updateId,\n    });\n\n    // Send result back to Studio\n    if (this.messageBridge) {\n      const responseMessage: SDKMessage = result.success\n        ? {\n            type: 'update-complete',\n            updateId: message.updateId,\n            timestamp: Date.now(),\n          }\n        : {\n            type: 'update-failed',\n            updateId: message.updateId,\n            error: result.error || 'Update failed',\n            timestamp: Date.now(),\n          };\n\n      this.messageBridge.sendMessage(responseMessage);\n    }\n\n    // Emit local event\n    if (result.success) {\n      this.emitEvent('inspector:field-updated', {\n        entryId: message.entryId,\n        fieldApiId: message.fieldApiId,\n        newValue: message.newValue,\n      });\n    } else {\n      this.emitEvent('inspector:update-failed', {\n        entryId: message.entryId,\n        fieldApiId: message.fieldApiId,\n        error: result.error || 'Update failed',\n      });\n    }\n  }\n\n  private handleFocusField(message: StudioMessage & { type: 'focus-field' }): void {\n    // Find and focus the field element\n    const elements = this.fieldRegistry.getElementsForField(\n      message.fieldApiId,\n      message.locale\n    );\n\n    if (elements.length > 0) {\n      const element = elements[0].element;\n      element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n\n      // Try to focus if it's a focusable element\n      if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n        element.focus();\n      }\n    }\n  }\n\n  private async handleBulkUpdate(message: StudioMessage & { type: 'bulk-update' }): Promise<void> {\n    const results = await Promise.all(\n      message.changes.map(change => this.contentUpdater.updateField(change))\n    );\n\n    // Check if all updates succeeded\n    const allSucceeded = results.every(result => result.success);\n    const errors = results.filter(result => !result.success).map(result => result.error);\n\n    // Send bulk result back to Studio\n    if (this.messageBridge) {\n      const responseMessage: SDKMessage = allSucceeded\n        ? {\n            type: 'update-complete',\n            timestamp: Date.now(),\n          }\n        : {\n            type: 'update-failed',\n            error: `Bulk update failed: ${errors.join(', ')}`,\n            timestamp: Date.now(),\n          };\n\n      this.messageBridge.sendMessage(responseMessage);\n    }\n  }\n\n  private async handleContentSaved(message: StudioMessage & { type: 'content-saved' }): Promise<void> {\n    if (this.config.debug) {\n      console.log('[Inspector] Content saved, triggering framework refresh');\n    }\n\n    // Emit save event\n    this.emitEvent('inspector:content-saved', {\n      entryId: message.entryId,\n      timestamp: message.timestamp\n    });\n\n    // Execute save callbacks for framework integration\n    for (const callback of this.saveCallbacks) {\n      try {\n        await callback(message.entryId);\n      } catch (error) {\n        console.error('[Inspector] Save callback failed:', error);\n      }\n    }\n  }\n\n  private handleDisconnect(): void {\n    if (this.config.debug) {\n      console.log('[Inspector] Disconnected from Studio');\n    }\n    this.emitEvent('inspector:disconnected', {});\n  }\n\n  private setupEditClickHandler(): void {\n    // Set up edit click handler for overlay manager\n    document.addEventListener('hygraph-edit-click', this.handleEditClick as EventListener);\n  }\n\n  private handleEditClick = (event: Event): void => {\n    const customEvent = event as CustomEvent;\n    const registeredElement = customEvent.detail;\n    const element = registeredElement.element;\n\n    if (this.mode === 'iframe') {\n      this.handleIframeEditClick(element);\n    } else {\n      this.handleStandaloneEditClick(element);\n    }\n  };\n\n  private setupIframeEditHandlers(): void {\n    // Edit handlers are now managed by OverlayManager\n    // This method is kept for compatibility but overlay handles the clicks\n  }\n\n  private setupStandaloneEditHandlers(): void {\n    // Edit handlers are now managed by OverlayManager\n    // This method is kept for compatibility but overlay handles the clicks\n  }\n\n  private handleIframeEditClick(element: HTMLElement): void {\n    const entryId = element.getAttribute('data-hygraph-entry-id');\n    const fieldApiId = element.getAttribute('data-hygraph-field-api-id') || undefined;\n    const locale = element.getAttribute('data-hygraph-field-locale') || undefined;\n\n    if (!entryId) return;\n\n    // Send field click message to Studio\n    if (this.messageBridge) {\n      const message: SDKMessage = {\n        type: 'field-click',\n        entryId,\n        fieldApiId,\n        locale,\n        timestamp: Date.now(),\n      };\n\n      const success = this.messageBridge.sendMessage(message);\n\n      // Fallback to standalone mode if not connected\n      if (!success && this.config.standalone?.fallbackToNewTab !== false) {\n        if (this.config.debug) {\n          console.log('[Inspector] Studio not connected, falling back to new tab');\n        }\n        this.handleStandaloneEditClick(element);\n      }\n    }\n\n    // Emit event\n    this.emitEvent('inspector:field-click', {\n      entryId,\n      fieldApiId,\n      locale,\n      mode: this.mode\n    });\n  }\n\n  private handleStandaloneEditClick(element: HTMLElement): void {\n    const entryId = element.getAttribute('data-hygraph-entry-id');\n    const fieldApiId = element.getAttribute('data-hygraph-field-api-id') || undefined;\n    const locale = element.getAttribute('data-hygraph-field-locale') || undefined;\n\n    if (!entryId) return;\n\n    if (!this.config.endpoint) {\n      console.error('[Inspector] Cannot open Studio - no endpoint configured');\n      return;\n    }\n\n    // Construct Studio resource route URL\n    const studioUrl = this.buildStudioUrl(entryId, fieldApiId, locale);\n\n    // Open in new tab\n    window.open(studioUrl, '_blank', 'noopener,noreferrer');\n\n    if (this.config.debug) {\n      console.log('[Inspector] Opened Studio in new tab:', studioUrl);\n    }\n\n    // Emit event\n    this.emitEvent('inspector:field-click', {\n      entryId,\n      fieldApiId,\n      locale,\n      mode: this.mode\n    });\n  }\n\n  private buildStudioUrl(entryId: string, fieldApiId?: string, locale?: string): string {\n    const baseUrl = this.config.studioUrl || 'https://app.hygraph.com';\n    const params = new URLSearchParams({\n      endpoint: this.config.endpoint,\n      entryId,\n    });\n\n    if (fieldApiId) params.set('fieldApiId', fieldApiId);\n    if (locale) params.set('locale', locale);\n\n    return `${baseUrl}/entry?${params.toString()}`;\n  }\n\n  private emitEvent<K extends keyof import('../types').InspectorEvents>(\n    type: K,\n    detail: import('../types').InspectorEvents[K]['detail']\n  ): void {\n    const event = new CustomEvent(type, { detail });\n    document.dispatchEvent(event);\n  }\n}"],"names":["FieldRegistry","constructor","config","this","registry","observer","isDestroyed","initializeObserver","scanExistingElements","getElementsForField","fieldApiId","locale","elements","elementList","Object","values","element","push","getElementsForEntry","entryId","getElement","key","createRegistryKey","refresh","destroy","_a","disconnect","MutationObserver","mutations","mutation","type","node","addedNodes","nodeType","Node","ELEMENT_NODE","scanElement","attributeName","startsWith","updateElementRegistration","target","observe","document","body","childList","subtree","attributes","attributeFilter","querySelectorAll","forEach","hasHygraphAttributes","registerElement","child","hasAttribute","getAttribute","registeredElement","lastUpdated","Date","now","existingIndex","findIndex","reg","debug","console","log","tagName","unregisterElement","entries","filteredElements","filter","length","parts","join","getStats","Set","fields","totalElements","add","entriesCount","size","fieldsCount","getRegistryKeys","keys","MessageBridge","isConnected","studioOrigin","messageQueue","handleMessage","event","isOriginAllowed","origin","message","data","isValidStudioMessage","handleConnection","onMessage","setupMessageListener","sendMessage","window","parent","postMessage","error","sendReadyMessage","sentSuccessfully","allowedOrigins","isConnectedToStudio","getStudioOrigin","removeEventListener","addEventListener","onReady","setTimeout","includes","some","allowed","pattern","replace","RegExp","test","timestamp","fieldType","newValue","Array","isArray","changes","flushMessageQueue","messages","ContentUpdater","updateQueue","Map","updateField","update","success","updateKey","set","delay","updateDelay","get","delete","findElements","hasError","lastError","updateElement","Error","String","elementsCount","errorMessage","clear","selector","found","from","updateTextField","updateRichTextField","updateNumberField","updateBooleanField","updateDateField","updateAssetField","updateLocationField","updateColorField","updateComponentField","updateJsonField","value","textContent","richTextAST","children","htmlContent","richTextToHTML","hasMorphdom","tempElement","createElement","innerHTML","morphdom","stringValue","checked","formattedDate","toLocaleDateString","split","asset","updateSingleAsset","img","src","url","alt","width","height","link","href","fileName","location","latitude","longitude","locationText","setAttribute","color","style","backgroundColor","componentData","componentHtml","renderComponent","jsonData","jsonString","JSON","stringify","map","renderRichTextNode","text","escapeHtml","__typename","div","ms","Promise","resolve","OverlayManager","overlayElement","editButtonElement","currentTarget","handleMouseMove","contains","hygraphElement","closest","showOverlay","isMouseOverEditButton","hideOverlay","handleMouseLeave","handleScroll","updateOverlayPosition","handleResize","createOverlayElements","setupEventListeners","overlayEnabled","updateEditButton","showOverlayElements","hideOverlayElements","removeOverlayElements","removeEventListeners","id","cssText","background","transform","appendChild","rect","getBoundingClientRect","clientX","left","right","clientY","top","bottom","buttonTop","buttonLeft","Math","max","min","onclick","preventDefault","stopPropagation","handleEditClick","fieldName","title","CustomEvent","detail","bubbles","dispatchEvent","display","remove","detectedFramework","detectFramework","getFramework","getRefreshFunction","getNextjsRefresh","getRemixRefresh","getGatsbyRefresh","getNuxtRefresh","getSveltekitRefresh","getVanillaRefresh","refreshFn","reload","hasNextjs","router","getNextjsRouter","hasRemix","revalidator","getRemixRevalidator","hasGatsby","hasNuxt","hasSveltekit","__NEXT_DATA__","next","querySelector","__remixContext","__remixRouterContext","___gatsby","__GATSBY","__NUXT__","$nuxt","__SVELTEKIT__","_b","__remixRevalidator","asPath","pathname","revalidate","__remixRevalidate","nuxtApp","refreshCookie","invalidateAll","getSetupInstructions","messageBridge","saveCallbacks","mode","handleIframeEditClick","handleStandaloneEditClick","retryAttempts","autoConnect","determineMode","fieldRegistry","contentUpdater","overlayManager","initializeIframeMode","initializeStandaloneMode","setupEditClickHandler","__HYGRAPH_INSPECTOR__","emitEvent","inspector","subscribe","eventType","callback","getVersion","getMode","self","e","getAllowedOrigins","handleStudioMessage","bind","setupIframeEditHandlers","studioUrl","isProductionEndpoint","warn","setupStandaloneEditHandlers","origins","URL","endpoint","sdkVersion","handleInitMessage","handleFieldUpdate","handleFocusField","handleBulkUpdate","handleContentSaved","handleDisconnect","result","updateId","responseMessage","scrollIntoView","behavior","block","HTMLInputElement","HTMLTextAreaElement","focus","results","all","change","allSucceeded","every","errors","standalone","fallbackToNewTab","buildStudioUrl","open","baseUrl","params","URLSearchParams","toString"],"mappings":"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"}